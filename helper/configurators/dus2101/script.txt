// StreetGateDUS2101
// -----------------
// Generated by Helpgen.py, version 2.44 beta © 
// Date: 2015-07-01 06:09

wizardID = 'StreetGateDUS2101';

var IsDebug:Boolean = new Boolean(false);
var IsDeepDebug:Boolean = new Boolean(false);
var IsLoad:Boolean = new Boolean(false);
var IsForcedValidation:Boolean = new Boolean(false);

var validation_disable:Boolean = new Boolean(false);
var prices_disable:Boolean = new Boolean(false);

if (!(IsExist('helperReset') && helperReset)) 
{

// ------------------------------------
//  #S.Globals: ГЛОБАЛЬНЫЕ ОПРЕДЕЛЕНИЯ
// ------------------------------------

var country_path:String = '';
var now:Date = new Date();

isWorkWithout1C = false;

var common_image:String = '';
var image:String = 'default.jpg';

NoticeMessage = "";

var country:String = countryID ? countryID.toUpperCase() : '';
country_path = ''; // currentLocale.toLowerCase();

var string_delimeter:String = 'x';

image = 'default.jpg';
var defaultImage:String = image;

//IsForcedValidation = true;

//if (IsExist('helperProductControl')) helperProductControl.enabled = true;

var shield_enabled:Number = !Compound_SlideRailsOnly ? 1 : 0;
var power_rack_enabled:Number = !Compound_ShieldOnly ? 1 : 0;

function checkStatusOfProductInfoGroup() {
    objectStatus["SquareClearance"] = 
    objectStatus["ObstacleDistance"] = 
    objectStatus["Opening_Left"] = 
    objectStatus["Opening_Right"] = 
    objectStatus["ColumnMaterialTitle_1"] = 
    objectStatus["ColumnMaterial_List"] = 
    objectStatus["FenceMaterialTitle_1"] = 
    objectStatus["FenceMaterial_List"] = 
    objectStatus["GroundMaterialTitle_1"] = 
    objectStatus["GroundMaterial_List"] = 
    shield_enabled;
}

var no_sandwich_panel:Boolean = true;
var no_window:Boolean = true;
var no_door:Boolean = true;
var no_aluminum_profile:Boolean = true;

function checkStatusOfGateShieldGroup() {}

function checkStatusOfPowerRackGroup() {
    objectStatus["RackDeliveryGroupTitle_1"] = 
    objectStatus["RackDelivery_Default"] = 
    objectStatus["RackDelivery_1"] = 
    objectStatus["RackType_Default"] = 
    objectStatus["RackType_Concreted"] = 
    objectStatus["PoleCatcherGroupTitle_1"] = 
    objectStatus["PoleCatcher_Default"] = 
    objectStatus["PoleCatcher_Concreted"] = 
    objectStatus["PoleCatcherHeight"] = 
    power_rack_enabled;

    objectStatus["PoleCatcherGroupTitle_2"] = 
    objectStatus["PoleCatcher_Concreted_Value"] = 
    PoleCatcher_Concreted ? power_rack_enabled : 0;
}

function checkStatusOfDriveGroup() {
    objectStatus["DriveSetup"] = 
    shield_enabled;
}

function checkStatusOfEquipmentGroup() {
    objectStatus["AdditionalDevices_1"] = 
    objectStatus["AdditionalDevices_1_Count"] = 
    objectStatus["AdditionalDevices_2"] = 
    objectStatus["AdditionalDevices_2_Count"] = 
    objectStatus["AdditionalDevices_3"] = 
    objectStatus["AdditionalDevices_3_Count"] = 
    objectStatus["AdditionalDevices_4"] = 
    objectStatus["AdditionalDevices_4_Count"] = 
    objectStatus["AdditionalDevices_5"] = 
    objectStatus["AdditionalDevices_5_Count"] = 
    objectStatus["AdditionalDevices_6"] = 
    objectStatus["AdditionalDevices_6_Count"] = 
    objectStatus["AdditionalDevices_7"] = 
    objectStatus["AdditionalDevices_7_Count"] = 
    objectStatus["AdditionalDevices_8"] = 
    objectStatus["AdditionalDevices_8_Count"] = 
    objectStatus["AdditionalDevices_9"] = 
    objectStatus["AdditionalDevices_9_Count"] = 
    objectStatus["AdditionalDevices_10"] = 
    objectStatus["AdditionalDevices_10_Count"] = 
    objectStatus["AdditionalDevices_11"] = 
    objectStatus["AdditionalDevices_11_Count"] = 
    objectStatus["AdditionalDevices_12"] = 
    objectStatus["AdditionalDevices_12_Count"] = 
    objectStatus["AdditionalDevices_14"] = 
    objectStatus["AdditionalDevices_14_Count"] = 
    objectStatus["AdditionalDevices_15"] = 
    objectStatus["AdditionalDevices_15_Count"] = 
    shield_enabled;
}

function checkStatusOfExpendableMaterialsGroup() {
    objectStatus["ExpendableMaterials_ControlCabel_2"] = 
    objectStatus["ExpendableMaterials_ControlCabel_2_Count"] = 
    objectStatus["ExpendableMaterials_PowerCabel_3"] = 
    objectStatus["ExpendableMaterials_PowerCabel_3_Count"] = 
    objectStatus["ExpendableMaterials_PowerCabel_4"] = 
    objectStatus["ExpendableMaterials_PowerCabel_4_Count"] = 
    objectStatus["ExpendableMaterials_CorrugatedPlastic"] = 
    objectStatus["ExpendableMaterials_CorrugatedPlastic_Count"] = 
    objectStatus["ExpendableMaterials_CorrugatedMetallic"] = 
    objectStatus["ExpendableMaterials_CorrugatedMetallic_Count"] = 
    objectStatus["ExpendableMaterials_CorrugatedAttachement_20"] = 
    objectStatus["ExpendableMaterials_CorrugatedAttachement_20_Count"] = 
    shield_enabled;
}

var max_square_height:Number = 0;
var max_square_width:Number = 0;

function checkSquareHeightWidth(max_square_height:Number, max_square_width:Number, word_shield_body:String, word_more_less:String) {
    if (SquareWidth > max_square_width && SquareHeight > max_square_height)
    {
        helperErrorCode = -3;
        helperErrorMessage = ExtraSquareHeightMessage
            .replace('CCC', word_shield_body + ' ' + word_and + ' ' + word_more_less + ' ' + max_square_width)
            .replace('---', word_more)
            .replace('XXX', max_square_height.toString());
    }
}

blockConstructSquare();

function setColumnMaterial() {
    var x:Array = getListSelectedValue(ColumnMaterial_List);
    columnMaterial_up = x[0];
}

function setFenceMaterial() {
    var x:Array = getListSelectedValue(FenceMaterial_List);
    fenceMaterial_up = x[0];
}

function setGroundMaterial() {
    var x:Array = getListSelectedValue(GroundMaterial_List);
    groundMaterial_up = x[0];
}

function checkStatusOfGateShield() {}

function setGateShield() {}

var shield_outer_enable:Boolean = false;
var inner_equal_outer:Boolean = false;

function initOuterColor() {
    if (OuterColorStandard) {
        OuterColor_List = listOuterColorStandard;
    }
    else if (OuterColorNonStandard) {
        OuterColor_List = listOuterColorNonStandard;
        if (default_outer_color_nonstandard)
            OuterColor_List = setListSelectedIndexById(OuterColor_List, default_outer_color_nonstandard);
    }
    else if (OuterColor_Custom && default_outer_color_custom && !OuterColor_Value) {
        OuterColor_Value = parseInt(default_outer_color_custom);
    }
}

function checkStatusOfOuterColor() {
    shield_outer_enable = true;
    var enable_by_default:Number = 1;

    objectStatus["OuterColorStandard"] = enable_by_default;
    objectStatus["OuterColorNonStandard"] = enable_by_default;
    objectStatus["OuterColor_Custom"] = enable_by_default;

    objectStatus["OuterColor_List"] = !OuterColor_Custom ? enable_by_default : 0;
    objectStatus["OuterColor_Value"] = OuterColor_Custom ? enable_by_default : 0;

    inner_equal_outer = true;
}

function setOuterColor() {
    if (OuterColor_Custom)
        outerColor_up = OuterColor_Value.toString();
    else
        outerColor_up = getListSelectedItem(OuterColor_List, 0);
}

function initRackColor() {
    RackColor_List = listRackColorNonStandard;

    if (RackColorStandard)
        return;
    else if (RackColorNonStandard) {
        if (default_rack_color_nonstandard)
            RackColor_List = setListSelectedIndexById(RackColor_List, default_rack_color_nonstandard);
    }
    else if (RackColor_Custom)
        RackColor_Value = default_rack_color_custom ? parseInt(default_rack_color_custom) : 0;
}

function checkStatusOfRackColor() {
    var enable_by_default:Number = power_rack_enabled ? shield_enabled : 0;

    objectStatus["RackColorStandard"] = objectStatus["RackColorNonStandard"] = objectStatus["RackColor_Custom"] = enable_by_default;

    objectStatus["RackColor_List"] = RackColorNonStandard ? enable_by_default : 0;
    objectStatus["RackColor_Value"] = RackColor_Custom ? enable_by_default : 0;
}

function setRackColor() {
    if (RackColorStandard) {
        rackColor_up = outerColor_up;
        RackColor_Value = parseInt(rackColor_up);
    }
    else if (RackColor_Custom)
        rackColor_up = RackColor_Value.toString();
    else
        rackColor_up = getListSelectedItem(RackColor_List, 0);

    if (isNaN(RackColor_Value)) RackColor_Value = 0;
}

var selected_drive_code:String = '';

function checkStatusOfDriveModel() {
    objectStatus["DriveModelStandard_List"] = DriveSetup ? shield_enabled : 0;
}

function setDriveModel() {
    driveModel_up = IsTrue('DriveSetup') ? getListSelectedItem(DriveModelStandard_List, 0) : '';
}

function checkStatusOfControlDevicesGroup() {
    var ids:Array = [
    'ShiftingGates_RACK_8', 
    'ShiftingGates_RACK_8_Count', 
    'ShiftingGates_DHRACK', 
    'ShiftingGates_DHRACK_Count', 
    'ShiftingGatesGroup_719328', 
    'ShiftingGatesGroup_719328_Count', 
    'AdditionalDevicesGroup_GSM', 
    'AdditionalDevicesGroup_GSM_Count', 
    'AdditionalDevicesGroup_Keypad', 
    'AdditionalDevicesGroup_Keypad_Count', 
    'AdditionalDevicesGroup_KEYSWITCH_N', 
    'AdditionalDevicesGroup_KEYSWITCH_N_Count', 
    'AdditionalDevicesGroup_STOP', 
    'AdditionalDevicesGroup_STOP_Count', 
    'AdditionalDevicesGroup_DHRE_2', 
    'AdditionalDevicesGroup_DHRE_2_Count', 
    'AdditionalDevicesGroup_Receiver_433', 
    'AdditionalDevicesGroup_Receiver_433_Count', 
    'AdditionalDevicesGroup_Transmitter_2', 
    'AdditionalDevicesGroup_Transmitter_2_Count', 
    'AdditionalDevicesGroup_Transmitter_4', 
    'AdditionalDevicesGroup_Transmitter_4_Count', 
    'AdditionalDevicesGroup_Transmitter_4_White', 
    'AdditionalDevicesGroup_Transmitter_4_White_Count', 
    'AdditionalDevicesGroup_Transmitter_4_Yellow', 
    'AdditionalDevicesGroup_Transmitter_4_Yellow_Count', 
    'AdditionalDevicesGroup_Transmitter_4_Green', 
    'AdditionalDevicesGroup_Transmitter_4_Green_Count', 
    'AdditionalDevicesGroup_Transmitter_4_Orange', 
    'AdditionalDevicesGroup_Transmitter_4_Orange_Count', 
    'AdditionalDevicesGroup_Transmitter_4_Pink', 
    'AdditionalDevicesGroup_Transmitter_4_Pink_Count', 
    'AdditionalDevicesGroup_Transmitter_4_Black', 
    'AdditionalDevicesGroup_Transmitter_4_Black_Count', 
    'AdditionalDevicesGroup_Transmitter_Premium',
    'AdditionalDevicesGroup_Transmitter_Premium_Count',
    'AdditionalDevicesGroup_Transmitter_PRO',
    'AdditionalDevicesGroup_Transmitter_PRO_Count',
    'AdditionalDevicesGroup_Antenna_433',
    'AdditionalDevicesGroup_Antenna_433_Count',
    'AdditionalDevicesGroup_RCBLACK_4', 
    'AdditionalDevicesGroup_RCBLACK_4_Count', 
    'AdditionalDevicesGroup_LAMP', 
    'AdditionalDevicesGroup_LAMP_Count', 
    'AdditionalDevicesGroup_LAMP_LED', 
    'AdditionalDevicesGroup_LAMP_LED_Count', 
    'AdditionalDevicesGroup_WDKIT', 
    'AdditionalDevicesGroup_WDKIT_Count', 
    'AdditionalDevicesGroup_DHPC', 
    'AdditionalDevicesGroup_DHPC_Count', 
    'AdditionalDevicesGroup_PHOTOCELL_N', 
    'AdditionalDevicesGroup_PHOTOCELL_N_Count', 
    'AdditionalDevicesGroup_PHOTOCELL_R', 
    'AdditionalDevicesGroup_PHOTOCELL_R_Count', 
    'AdditionalDevicesGroup_Heater', 
    'AdditionalDevicesGroup_Heater_Count', 
    'AdditionalDevicesGroup_XT2_868SLH', 
    'AdditionalDevicesGroup_XT2_868SLH_Count', 
    'AdditionalDevicesGroup_XT4_868SLH', 
    'AdditionalDevicesGroup_XT4_868SLH_Count', 
    'AdditionalDevicesGroup_RX_RP1_868_SLH', 
    'AdditionalDevicesGroup_RX_RP1_868_SLH_Count', 
    'AdditionalDevicesGroup_XF868', 
    'AdditionalDevicesGroup_XF868_Count', 
    'AdditionalDevicesGroup_XR2_868', 
    'AdditionalDevicesGroup_XR2_868_Count', 
    'AdditionalDevicesGroup_T10E', 
    'AdditionalDevicesGroup_T10E_Count', 
    'AdditionalDevicesGroup_FAAC_LIGHT', 
    'AdditionalDevicesGroup_FAAC_LIGHT_Count', 
    'AdditionalDevicesGroup_410014', 
    'AdditionalDevicesGroup_410014_Count', 
    'AdditionalDevicesGroup_XP15B', 
    'AdditionalDevicesGroup_XP15B_Count', 
    'AdditionalDevicesGroup_SAFEBEAM', 
    'AdditionalDevicesGroup_SAFEBEAM_Count', 
    'AdditionalDevicesGroup_XP15W', 
    'AdditionalDevicesGroup_XP15W_Count', 
    'AdditionalDevicesGroup_FG1', 
    'AdditionalDevicesGroup_FG1_Count', 
    'AdditionalDevicesGroup_FG2', 
    'AdditionalDevicesGroup_FG2_Count'
    ];
    setStatus(ids, IsTrue('DriveSetup') ? 1 : 0);
}

function checkColorListMatched(outer:String, colors:Array, index:int): Boolean
{
    var selected_index:int = getListSelectedIndex(outer);
    var item:Array = getListItem(outer, selected_index);
    if (!item || item.length < 1) return false;

    var name:String = item[0];          // наименование цвета

    var color:Array = name.split(' ');
    if (color.length < index+1) return false;

    var code:String = color[index];     // код цвета
    if (!code) return false;

    return colors.indexOf(code) == -1 ? false : true;
}

function addColorMargins(outer:String, lst:Array, index:int)
{
    for (var i:int=0; i < lst.length; i++) {
        var x:Array = lst[i].split(':');
        if (x.length > 1) {
            var colors:Array = strip(x[0]).split('-');
            var margin:String = strip(x[1]);
            if (colors.length > 0 && margin && checkColorListMatched(outer, colors, index))
            {
                margins = addMargin(margins, [margin, 'NUMBER', 796, 1]);
            }
        }
    }
}

//
//  ========================================================================
//

if (IsDebug) NoticeMessage += "DEBUG: scriptExecCount [" + scriptExecCount + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: changedFormFieldID [" + changedFormFieldID + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: isConfirmation [" + isConfirmation + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: confirmCode [" + confirmCode + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: withoutRestriction [" + withoutRestriction + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: currentLocale [" + currentLocale + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: defaultProduct [" + defaultProduct + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: priceTypeID [" + priceTypeID + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: helperVersion [" + helperVersion + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: wizardID [" + wizardID + "]<br>";

// -------------------------------------------------
//  #S.Init: ИНИЦИАЛИЗАЦИЯ (ПАРАМЕТРЫ ПО УМОЛЧАНИЮ)
// -------------------------------------------------

if (!scriptExecCount)
{
    scriptExecCount = 0;

    //if (IsExist('showOnStartup')) showOnStartup = 'none'; //GarageInfoGroup

    SquareWidth = default_square_width;

    SquareHeight = default_square_height;

    SquareClearance = default_square_clearance;

    ObstacleDistance = default_obstacle_distance;

    SquareOverfall = default_square_overfall;

    ColumnMaterial_List = listTypeOfMaterial;
    if (default_column_material)
        ColumnMaterial_List = setListSelectedIndexById(ColumnMaterial_List, default_column_material);

    FenceMaterial_List = listTypeOfMaterial;
    if (default_fence_material)
        FenceMaterial_List = setListSelectedIndexById(FenceMaterial_List, default_fence_material);

    GroundMaterial_List = listTypeOfGround;
    if (default_ground_material)
        GroundMaterial_List = setListSelectedIndexById(GroundMaterial_List, default_ground_material);

    OuterColorStandard = true;
    initOuterColor();

    RackColorStandard = true;
    initRackColor();

    DriveModelStandard_List = listDriveModelStandard;
}
else

// ---------------------------------
//  #S.Load: ЗАГРУЗКА/РАСЧЕТ ЗАКАЗА
// ---------------------------------

if (scriptExecCount > 0 && !changedFormFieldID)
{
    IsLoad = true;

    SquareWidth = SquareWidth_up ? SquareWidth_up : default_square_width;

    SquareHeight = SquareHeight_up ? SquareHeight_up : default_square_height;

    SquareClearance = SquareClearance_up ? SquareClearance_up : default_square_clearance;

    ObstacleDistance = ObstacleDistance_up ? ObstacleDistance_up : default_obstacle_distance;

    SquareOverfall = SquareOverfall_up ? SquareOverfall_up : default_square_overfall;

    if (columnMaterial_up && columnMaterial_up != 'no') {
        ColumnMaterial_List = setListSelectedIndexById(ColumnMaterial_List, columnMaterial_up); 
        if (IsDebug) 
            NoticeMessage += "DEBUG: ColumnMaterial Index [" + getListSelectedIndex(ColumnMaterial_List) + "]<br>";
    }

    if (fenceMaterial_up && fenceMaterial_up != 'no') {
        FenceMaterial_List = setListSelectedIndexById(FenceMaterial_List, fenceMaterial_up); 
        if (IsDebug) 
            NoticeMessage += "DEBUG: FenceMaterial Index [" + getListSelectedIndex(FenceMaterial_List) + "]<br>";
    }

    if (groundMaterial_up && groundMaterial_up != 'no') {
        GroundMaterial_List = setListSelectedIndexById(GroundMaterial_List, groundMaterial_up); 
        if (IsDebug) 
            NoticeMessage += "DEBUG: GroundMaterial Index [" + getListSelectedIndex(GroundMaterial_List) + "]<br>";
    }

    initOuterColor();
    if (outerColor_up) {
        if (OuterColor_Custom)
            OuterColor_Value = outerColor_up;
        else
            OuterColor_List = setListSelectedIndexById(OuterColor_List, outerColor_up); 
    }

    initRackColor();
    if (rackColor_up) {
        if (RackColorStandard || RackColor_Custom)
            RackColor_Value = rackColor_up;
        else
            RackColor_List = setListSelectedIndexById(RackColor_List, rackColor_up); 
    }

    if (driveModel_up) {
        DriveModelStandard_List = setListSelectedIndexById(DriveModelStandard_List, driveModel_up);
        if (IsDebug) NoticeMessage += "DEBUG: DriveModelStandard Index [" + getListSelectedIndex(DriveModelStandard_List) + "]<br>";
    }

    if (constSavedImage && constSavedImage != defaultImage && scriptExecCount > 0) image = constSavedImage;
}



// ---------------------------------
//  #S.Begin: НАЧАЛЬНЫЕ ОПРЕДЕЛЕНИЯ
// ---------------------------------

checkStatusOfOuterColor();

// базовая цена - основное изделие
construct_default = 1;

// --------------------------------------
//  #S.OnChange: ОБРАБОТКА СОБЫТИЙ ФОРМЫ
// --------------------------------------

if (changedFormFieldID)
{
    var ids:Array = new Array('SquareWidth', 'SquareHeight', 'SquareClearance', 'ObstacleDistance', 'ColumnMaterial_List', 'FenceMaterial_List', 'GroundMaterial_List', 'Opening_Left', 'Opening_Right');
    if (ids.indexOf(changedFormFieldID) > -1) {
        image = 'square.jpg';
    }

    var ids:Array = new Array('OuterColorStandard', 'OuterColorNonStandard', 'OuterColor_Custom', 'OuterDesign_List');
    if (ids.indexOf(changedFormFieldID) > -1) {
        initOuterColor();
    }

    var ids:Array = new Array('RackColorStandard', 'RackColorNonStandard', 'RackColor_Custom');
    if (ids.indexOf(changedFormFieldID) > -1) {
        initRackColor();
    }

    if (power_rack_enabled && IsStringStartedWith(changedFormFieldID, 'PoleCatcher_')) {
        image = PoleCatcher_Default ? 'pole-catcher-default.jpg' : 'pole-catcher-concreted.jpg';
    }
    if (power_rack_enabled && IsStringStartedWith(changedFormFieldID, 'RackType_')) {
        image = RackType_Default ? 'rack-type-default.jpg' : 'rack-type-concreted.jpg';
    }
}



// -------------------------------------------------
//  #S.OnControl: ИНТЕРАКТИВНЫЙ КОНТРОЛЬ ПАРАМЕТРОВ
// -------------------------------------------------

if (scriptExecCount > 0 && IsExist('helperProductControl') && helperProductControl['active'])
{

}

// --------------------------------
//  #S.Main: УСТАНОВКА КОНСТРУКЦИИ
// --------------------------------

if (helperErrorCode == 0)
{
    SquareWidth_up = SquareWidth;

    SquareHeight_up = SquareHeight;

    var square_aperture = (SquareWidth * SquareHeight)/1000000;
    SquareAperture = square_aperture.toString();

    SquareClearance_up = SquareClearance;

    ObstacleDistance_up = ObstacleDistance;

    SquareOverfall_up = SquareOverfall;

    setColumnMaterial();

    setFenceMaterial();

    setGroundMaterial();

    setOuterColor();

    var pole_catcher_height:Number = PoleCatcher_Concreted ? SquareHeight + 1510 : SquareHeight + 10;
    PoleCatcherHeight = pole_catcher_height.toString();

    setRackColor();

    if (DriveSetup) {
        var x:String = getListSelectedItem(DriveModelStandard_List, 2);
        DriveModel_Code = x ? x : word_not_defined;
        selected_drive_code = x;
    } else {
        DriveModel_Code = word_not_defined;
    }

    setDriveModel();

    var drive_model_DHRACK:Array = ['SL-800KIT', 'SL-1300KIT', 'SL-2100KIT', '741KIT', '746ERKIT', '844ERKIT', 'DEIMOS700-DHKIT', 'ICARO-DHKIT'];
    var drive_model_719328:Array = ['884MCKIT'];
    
    if (['DriveSetup', 'SquareWidth', 'DriveModelStandard_List'].indexOf(changedFormFieldID) > -1) {
        if (SquareWidth > 3000) {
            if (drive_model_DHRACK.indexOf(driveModel_up) > -1) {
                ShiftingGates_DHRACK_Count = SquareWidth < 3000 ? 0 : Math.ceil((SquareWidth - 3000)/1000);
                ShiftingGatesGroup_719328_Count = 0;
            }
            if (drive_model_719328.indexOf(driveModel_up) > -1) {
                ShiftingGates_DHRACK_Count = 0;
                ShiftingGatesGroup_719328_Count = SquareWidth < 3000 ? 0 : Math.ceil((SquareWidth - 3000)/1000);
            }
        } else {
            ShiftingGates_DHRACK_Count = 0;
            ShiftingGatesGroup_719328_Count = 0;
        }
    }

    checkStatusOfControlDevicesGroup();

    PackagingInfo_up = !Packaging_Wood ? PackagingWoodMessage : '';
}

// ------------------------------------
//  #S.Extra: ДОПОЛНИТЕЛЬНАЯ ОБРАБОТКА
// ------------------------------------

var ids:Array = new Array('LatticeHeight', 'LatticeStep', 'PicHeight', 'MinPicHeight', 'ArchHeight');
if (!IsStringStartedWith(changedFormFieldID, 'Compound_') && (image == defaultImage || !image)) {
    if (IsStringStartedWith(changedFormFieldID, 'Drive') || IsStringStartedWith(changedFormFieldID, 'AdditionalDevices_') || IsStringStartedWith(changedFormFieldID, 'ExpendableMaterials_'))
        image = defaultImage;
    else
        image = constSavedImage && constSavedImage != defaultImage && ids.indexOf(changedFormFieldID) == -1 ? constSavedImage : defaultImage;
}

var ids:Array = new Array('OuterColorStandard', 'OuterColorNonStandard', 'OuterColor_Custom', 'OuterColor_List', 'OuterColor_Value', 'ColorType_Mat', 'ColorType_Glossy');
if (ids.indexOf(changedFormFieldID) > -1) {
    image = !OuterColor_Custom ? ('RAL' + outerColor_up + '.jpg') : defaultImage;
}

// ------------------------------------
//  #S.Validation: КОНТРОЛЬ ПАРАМЕТРОВ
// ------------------------------------

if ((IsForcedValidation || (scriptExecCount > 0 && !IsLoad)) && !validation_disable && !withoutRestriction)
{
    if (SquareWidth < minSquareWidth || SquareWidth > maxSquareWidth)
    {
        helperErrorCode = -3;
        helperErrorMessage = SquareWidthMessage.replace('MIN', minSquareWidth).replace('MAX', maxSquareWidth);
    }

    if (SquareHeight < minSquareHeight || SquareHeight > maxSquareHeight)
    {
        helperErrorCode = -3;
        helperErrorMessage = SquareHeightMessage.replace('MIN', minSquareHeight).replace('MAX', maxSquareHeight);
    }

    if (SquareClearance < minSquareClearance || SquareClearance > maxSquareClearance)
    {
        helperErrorCode = -3;
        helperErrorMessage = SquareClearanceMessage;
    }

    var min_obstacle_distance:Number = SquareWidth + SquareWidth/3 + 500;
    if (ObstacleDistance < min_obstacle_distance)
    {
        if (changedFormFieldID == 'ObstacleDistance') {
            helperErrorCode = -3;
            helperErrorMessage = ObstacleDistanceMessage.replace('XXX', min_obstacle_distance.toString());
        } else {
            ObstacleDistance = default_obstacle_distance;
        }
    }

    if (SquareOverfall < minSquareOverfall || SquareOverfall > maxSquareOverfall)
    {
        helperErrorCode = -3;
        helperErrorMessage = SquareOverfallMessage;
    }

    blockConstructListItems('OuterColor_List');
}

// --------------------
//  #S.End: ЗАВЕРШЕНИЕ
// --------------------

constSavedImage = image;

if (IsDebug) {
    NoticeMessage += "DEBUG: country_path [" + country_path + "]<br>" +
                     "DEBUG: countryID [" + countryID + "]<br>" +
                     "DEBUG: regionID [" + regionID + "]<br>" +
                     "DEBUG: helperHostName [" + helperHostName + "]<br>" +
                     "DEBUG: image [" + image + "]<br>"
    ;
}

checkStatusOfProductInfoGroup();

checkStatusOfGateShieldGroup();

checkStatusOfPowerRackGroup();

checkStatusOfDriveGroup();

checkStatusOfEquipmentGroup();

checkStatusOfExpendableMaterialsGroup();

checkStatusOfRackColor();

checkStatusOfDriveModel();

// ----------------------------
//  #S.Prices: ЦЕНООБРАЗОВАНИЕ
// ----------------------------

if (!prices_disable && helperErrorCode == 0)
{
    if (shield_enabled) margins = addExtraMargin(margins, ['CB000149931', 'STRING', 796, 1]);

    if (selected_drive_code) margins = addExtraMargin(margins, [selected_drive_code, 'STRING', 796, 1]);

    if (shield_enabled && OuterColorNonStandard) margins = addMargin(margins, ['00000015628', 'NUMBER', 796, 1]);

    if (shield_enabled && OuterColor_Custom && parseInt(OuterColor_Value) > 0) margins = addMargin(margins, ['00000011685', 'NUMBER', 055, square_aperture]);

    if (power_rack_enabled && PoleCatcher_Default) margins = addMargin(margins, ['00000012518', 'NUMBER', 796, 1]);

    if (PoleCatcher_Concreted) margins = addMargin(margins, ['00000013156', 'NUMBER', 796, 1]);

    if (PoleCatcher_Concreted && PoleCatcher_Concreted_Value > 0) margins = addMargin(margins, ['00000119435', 'NUMBER', 796, PoleCatcher_Concreted_Value]);

    if (power_rack_enabled && RackType_Default) margins = addMargin(margins, ['00000117226', 'NUMBER', 796, 1]);

    if (RackType_Concreted && SquareHeight <= 3000) margins = addMargin(margins, ['00000117224', 'NUMBER', 796, 1]);

    if (PoleCatcher_Concreted && PoleCatcher_Concreted_Value > 0 && SquareHeight > 3000) margins = addMargin(margins, ['00000117225', 'NUMBER', 796, PoleCatcher_Concreted_Value]);

    if (SquareWidth >= 7000) margins = addMargin(margins, ['00000117228', 'NUMBER', 796, 1]);

    if (power_rack_enabled && SquareWidth >= 7000) margins = addMargin(margins, ['00000105717', 'NUMBER', 796, 1]);

    if (power_rack_enabled) margins = addMargin(margins, ['00000138855', 'NUMBER', 796, 1]);

    if (power_rack_enabled && !AdditionalDevices_4_Count) margins = addMargin(margins, ['00000114906', 'NUMBER', 796, 1]);

    if (IsDeepDebug) {
        NoticeMessage += "DEEPDEBUG: construct:<br>";
        NoticeMessage += "==> construct_default [" + construct_default + "]<br>";
        NoticeMessage += "==> defaultConstruct [" + defaultConstruct + "]<br>";
        NoticeMessage += "==> defaultConstructCount [" + defaultConstructCount + "]<br>";
    
        var lst:Array = getList(margins);
        if (lst.length) {
            NoticeMessage += "DEEPDEBUG: margins:<br>";
            for (var i:int=0; i<lst.length; i++) {
                NoticeMessage += "==> [" + lst[i] + "]<br>";
            }
        }
    }
}

// -----------------------
//  #S.Trace: ТРАССИРОВКА
// -----------------------

var IsTrace:Boolean = new Boolean(false);

if (IsTrace) {
    NoticeMessage = 
        "***<br>" +
    NoticeMessage;
}



//
//  =================
//

if (IsDeepDebug) {
    NoticeMessage += 
        "DEEPDEBUG: total images:" + imagePath.length + "<br>" +
        "DEEPDEBUG: imagePath:" + "<br>";
    for (var i=0; i<imagePath.length; i++) {
        NoticeMessage += "==> [" + imagePath[i] + "]<br>";
    }
    NoticeMessage += 
        "DEEPDEBUG: imageVisibility:" + imageVisibility.toString() + "<br>" +
        "DEEPDEBUG: imageX:" + imageX.toString() + "<br>" +
        "DEEPDEBUG: imageY:" + imageY.toString() + "<br>";
}

setImageURI = common_image ? 'images/' + common_image + '/' + image : country_path + default_image + image;

if (IsDeepDebug) {
    NoticeMessage += 
        "DEEPDEBUG: setImageURI:" + setImageURI + "<br>";
}

if (IsDeepDebug) NoticeMessage += "DEEPDEBUG: constSavedImage [" + constSavedImage + "]<br>";

}

if (prices_disable) attentionMessage = getSystemOption('prices_disable', currentLocale) + attentionMessage;
if (validation_disable) attentionMessage = getSystemOption('validation_disable', currentLocale) + attentionMessage;
if (isWorkWithout1C) attentionMessage = getSystemOption('isWorkWithout1C', currentLocale) + attentionMessage;
if (withoutRestriction) attentionMessage = getSystemOption('withoutRestriction', currentLocale) + attentionMessage;
if (IsDebug || IsDeepDebug) attentionMessage = getSystemOption('Debug', currentLocale) + attentionMessage;

++scriptExecCount;

NoticeMessage += (NoticeMessage ? '<br>' : '') + '* * * <br>Generated by Helpgen.py, version 2.44 beta © <br>Product Release 1.12 42186.0<br>Date: 2015-07-01 06:09'
