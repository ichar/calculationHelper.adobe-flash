// FenceWicketDUS931
// -----------------
// Generated by Helpgen.py, version 2.37 beta © 
// Date: 2014-09-13 07:49

wizardID = 'FenceWicketDUS931';

// ------------------------------
//  Globals: ОПИСАНИЕ ПЕРЕМЕННЫХ
// ------------------------------

var country_path:String = '';
var now:Date = new Date();

var IsDebug:Boolean = new Boolean(false);
var IsDeepDebug:Boolean = new Boolean(false);
var IsLoad:Boolean = new Boolean(false);
var IsForcedValidation:Boolean = new Boolean(false);

var validation_disable:Boolean = new Boolean(false);
var prices_disable:Boolean = new Boolean(false);

isWorkWithout1C = false;

var common_image:String = '';
var image:String = 'default.jpg';

NoticeMessage = "";

var country:String = countryID ? countryID.toUpperCase() : '';
country_path = ''; // currentLocale.toLowerCase();

var string_delimeter:String = 'x';

image = 'default.jpg';
var defaultImage:String = image; // 'default-2.jpg'

//isItemStyle = true;

function setDefaultImage() {
//    if (standardModel_up) image = 'size-' + standardModel_up + '.jpg'; 
}

var shield_enabled:Number = 1;
var power_rack_enabled:Number = 1; //Compound_GateOnly ? 0 : 1;

var square_width:Number = 0;

function initSquareWidth() {
    SquareWidth_List = listSquareWidth;
    if (default_width)
        SquareWidth_List = setListSelectedIndexById(SquareWidth_List, default_width);
}

function checkStatusOfSquareWidth() {
    objectStatus["SquareWidth_List"] = 1;
}

function setSquareWidth() {
    SquareWidth_up = getListSelectedItem(SquareWidth_List, 0);
    square_width = Number(SquareWidth_up);
}

var square_height:Number = 0;

function initSquareHeight() {
    SquareHeight_List = listSquareHeight;
    if (default_height)
        SquareHeight_List = setListSelectedIndexById(SquareHeight_List, default_height);
}

function checkStatusOfSquareHeight() {
    objectStatus["SquareHeight_List"] = 1;
}

function setSquareHeight() {
    SquareHeight_up = getListSelectedItem(SquareHeight_List, 0);
    square_height = Number(SquareHeight_up);
}

var square_aperture:Number = 0;

objectStatus["SquareClearanceGroupTitle_1"] = 1;

var with_assembly:Boolean = false;
var selected_assembly_code:String = '';

function checkStatusOfAssemblyType() {
    objectStatus["AssemblyTypeTitle_1"] = 
    objectStatus["AssemblyType_List"] = 
    1;
}

function setAssemblyType() {
    var x:Array = getListSelectedValue(AssemblyType_List);
    assemblyType_up = x[0];
    selected_assembly_code = x[2];
    with_assembly = assemblyType_up && assemblyType_up != 'no' ? true : false;
}

objectStatus["AssemblyGroupTitle_1"] = 1;

var no_sandwich_panel:Boolean = false;

var shield_outer_enable:Boolean = false;
var inner_equal_outer:Boolean = false;
var selected_outer_color:String = '';

function initOuterColor() {
    if (OuterColorStandard) {
        OuterColor_List = listOuterColorStandard;
    }
    else if (OuterColorNonStandard) {
        OuterColor_List = listOuterColorNonStandard;
        if (default_outer_color_nonstandard)
            OuterColor_List = setListSelectedIndexById(OuterColor_List, default_outer_color_nonstandard);
    }
    else if (OuterColor_Custom && default_outer_color_custom && !OuterColor_Value) {
        OuterColor_Value = parseInt(default_outer_color_custom);
    }
}

function checkStatusOfOuterColor() {
    shield_outer_enable = true;
    var enable_by_default:Number = 1;

    objectStatus["OuterColorStandard"] = enable_by_default;
    objectStatus["OuterColorNonStandard"] = enable_by_default;
    objectStatus["OuterColor_Custom"] = enable_by_default;

    objectStatus["OuterColor_List"] = !OuterColor_Custom ? enable_by_default : 0;
    objectStatus["OuterColor_Value"] = OuterColor_Custom ? enable_by_default : 0;

    inner_equal_outer = true;
}

function setOuterColor() {
    if (OuterColor_Custom)
        outerColor_up = OuterColor_Value.toString();
    else
        outerColor_up = getListSelectedItem(OuterColor_List, 0);
    selected_outer_color = outerColor_up;
}

var with_lock:Boolean = false;
var selected_lock_code:String = '';
var selected_handle_code:String = '';

function checkStatusOfWithLock() {
    objectStatus["WithLockTitle_1"] = objectStatus["WithLock_List"] = 
    shield_enabled ? 1 : 0;
}

function setWithLock() {
    var x:Array = getListSelectedValue(WithLock_List);
    withLock_up = x[0];
    with_lock = withLock_up && withLock_up != 'no' ? true : false;
    if (with_lock) {
        var codes:Array = x[2].split(':');
        selected_lock_code = codes[0];
        selected_handle_code = codes[1];
    }
}

function checkStatusOfDHA() {
    objectStatus["ExpendableMaterials_DHA_Count"] = ExpendableMaterials_DHA ? 1 : 0;
}

function checkColorListMatched(outer:String, colors:Array, index:int): Boolean
{
    var selected_index:int = getListSelectedIndex(outer);
    var item:Array = getListItem(outer, selected_index);
    if (!item || item.length < 1) return false;

    var name:String = item[0];          // наименование цвета

    var color:Array = name.split(' ');
    if (color.length < index+1) return false;

    var code:String = color[index];     // код цвета
    if (!code) return false;

    return colors.indexOf(code) == -1 ? false : true;
}

function addColorMargins(outer:String, lst:Array, index:int)
{
    for (var i:int=0; i < lst.length; i++) {
        var x:Array = lst[i].split(':');
        if (x.length > 1) {
            var colors:Array = strip(x[0]).split('-');
            var margin:String = strip(x[1]);
            if (colors.length > 0 && margin && checkColorListMatched(outer, colors, index))
            {
                margins = addMargin(margins, [margin, 'NUMBER', 796, 1]);
            }
        }
    }
}

//
//  ========================================================================
//

if (IsDebug) NoticeMessage += "DEBUG: scriptExecCount [" + scriptExecCount + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: changedFormFieldID [" + changedFormFieldID + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: isConfirmation [" + isConfirmation + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: confirmCode [" + confirmCode + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: withoutRestriction [" + withoutRestriction + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: currentLocale [" + currentLocale + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: defaultProduct [" + defaultProduct + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: priceTypeID [" + priceTypeID + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: constSavedImage [" + constSavedImage + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: helperVersion [" + helperVersion + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: wizardID [" + wizardID + "]<br>";

// ----------------------------------------------
//  Init: Инициализация (параметры по умолчанию)
// ----------------------------------------------

if (!scriptExecCount)
{
    scriptExecCount = 0;

    initSquareWidth();

    initSquareHeight();

    SquareClearance = default_square_clearance;

    AssemblyType_List = listAssemblyType;
    if (default_with_assembly)
        AssemblyType_List = setListSelectedIndexById(AssemblyType_List, default_with_assembly);

    OuterColorStandard = true;
    initOuterColor();

    WithLock_List = listWithLock;
    if (default_with_lock)
        WithLock_List = setListSelectedIndexById(WithLock_List, default_with_lock);
}
else

// -----------------------------
//  Load: ЗАГРУЗКА ЗАКАЗА ИЗ 1С
// -----------------------------

if (scriptExecCount > 0 && !changedFormFieldID)
{
    IsLoad = true;

    if (!SquareWidth_up)
        SquareWidth_up = default_width;
    SquareWidth_List = setListSelectedIndexById(SquareWidth_List, SquareWidth_up); 

    if (!SquareHeight_up)
        SquareHeight_up = default_height;
    SquareHeight_List = setListSelectedIndexById(SquareHeight_List, SquareHeight_up); 

    SquareClearance = SquareClearance_up ? SquareClearance_up : default_square_clearance;

    if (IsDebug) 
        NoticeMessage += "LOAD DEBUG: AssemblyType Index [" + getListSelectedIndex(AssemblyType_List) + "]<br>";

    initOuterColor();
    if (outerColor_up) {
        if (OuterColor_Custom)
            OuterColor_Value = outerColor_up;
        else
            OuterColor_List = setListSelectedIndexById(OuterColor_List, outerColor_up); 
    }

    if (IsDebug) 
        NoticeMessage += "LOAD DEBUG: WithLock Index [" + getListSelectedIndex(WithLock_List) + "]<br>";

    if (ExpendableMaterials_DHA_Count) ExpendableMaterials_DHA = true;

    if (constSavedImage && constSavedImage != defaultImage && scriptExecCount > 0) image = constSavedImage;
}



// ---------------
//  Begin: НАЧАЛО
// ---------------

setSquareWidth();

setSquareHeight();

// базовая цена - основное изделие
construct_default = 1;

// -----------------------------------
//  OnChange: ОБРАБОТКА СОБЫТИЙ ФОРМЫ
// -----------------------------------

if (changedFormFieldID)
{
    if (['SquareWidth_List', 'SquareHeight_List', 'SquareClearance'].indexOf(changedFormFieldID) > -1) {
        image = 'square.jpg';
    }

    var ids:Array = new Array('OuterColorStandard', 'OuterColorNonStandard', 'OuterColor_Custom', 'OuterDesign_List');
    if (ids.indexOf(changedFormFieldID) > -1) {
        initOuterColor();
    }
}



// ----------------------------------------------
//  OnControl: ИНТЕРАКТИВНЫЙ КОНТРОЛЬ ПАРАМЕТРОВ
// ----------------------------------------------

if (scriptExecCount > 0 && IsExist('helperProductControl') && helperProductControl['active'])
{

}

// -----------------------------
//  Main: УСТАНОВКА КОНСТРУКЦИИ
// -----------------------------

if (helperErrorCode == 0)
{
    square_aperture = (square_width * square_height) / 1000000;
    SquareAperture = roundNumber(square_aperture, 2, false);

    SquareClearance_up = SquareClearance;

    setAssemblyType();

    setOuterColor();

    if (scriptExecCount)
        WithLock_List = blockItems('WithLock_List', selected_outer_color == '6005' ? ['AHR24-R00'] : ['AHR24-R004'], listWithLock);

    setWithLock();

    checkStatusOfDHA();
}

// ---------------------
//  Main: ДОПОЛНИТЕЛЬНО
// ---------------------

var ids:Array = new Array('');
if (!IsStringStartedWith(changedFormFieldID, 'Compound_') && (image == defaultImage || !image)) {
    if (IsStringStartedWith(changedFormFieldID, 'Drive') || 
        IsStringStartedWith(changedFormFieldID, 'AdditionalDevices_') || 
        IsStringStartedWith(changedFormFieldID, 'ExpendableMaterials_')
       )
        image = defaultImage;
    else
        image = constSavedImage && constSavedImage != defaultImage && ids.indexOf(changedFormFieldID) == -1 ? constSavedImage : defaultImage;
}

if (['Opening_Outside', 'Opening_Inside', 'Hinge_Left', 'Hinge_Right'].indexOf(changedFormFieldID) > -1) {
    image = (Opening_Outside ? 'opening-outside-' : 'opening-inside-') + (Hinge_Left ? 'left' : 'right') + '.jpg';
}

if (['AssemblyType_List'].indexOf(changedFormFieldID) > -1) {
    image = 'assembly-' + assemblyType_up + '.jpg';
}

var ids:Array = new Array('OuterColorStandard', 'OuterColorNonStandard', 'OuterColor_List', 'ColorType_Mat', 'ColorType_Glossy');
if (ids.indexOf(changedFormFieldID) > -1) {
    image = !OuterColor_Custom && parseInt(outerColor_up) > 0 ? ('color-' + outerColor_up + '.jpg') : defaultImage;
}

if (['OuterColor_Custom', 'OuterColor_Value'].indexOf(changedFormFieldID) > -1 && IsTrue('OuterColor_Custom')) image = 'ral.jpg';

if (['WithLock_List'].indexOf(changedFormFieldID) > -1 && with_lock) {
    image = withLock_up + '.jpg';
}

if (['ExpendableMaterials_DHA'].indexOf(changedFormFieldID) > -1)
    image = 'DHA.jpg';

// ---------------------------------
//  Validation: КОНТРОЛЬ ПАРАМЕТРОВ
// ---------------------------------

if ((IsForcedValidation || (scriptExecCount > 0 && !IsLoad)) && !validation_disable && !withoutRestriction)
{
    if (SquareClearance < minSquareClearance || SquareClearance > maxSquareClearance)
    {
        helperErrorCode = -3;
        helperErrorMessage = SquareClearanceMessage;
    }
}

// -----------------
//  End: ЗАВЕРШЕНИЕ
// -----------------

constSavedImage = image;

if (IsDebug) {
    NoticeMessage += "DEBUG: country_path [" + country_path + "]<br>" +
                     "DEBUG: regionID [" + regionID + "]<br>" +
                     "DEBUG: helperHostName [" + helperHostName + "]<br>" +
                     "DEBUG: image [" + image + "]<br>"
    ;
}

checkStatusOfSquareWidth();

checkStatusOfSquareHeight();

checkStatusOfAssemblyType();

checkStatusOfOuterColor();

checkStatusOfWithLock();

// -----------------------------------
//  Prices: АРТИКУЛЫ, НАЦЕНКИ И Т.Д.
// -----------------------------------

if (!prices_disable && helperErrorCode == 0)
{
    margins = addExtraMargin(margins, ['00000145499', 'STRING', 796, 1]);

    if (shield_enabled && OuterColor_Custom && parseInt(OuterColor_Value) > 0) margins = addMargin(margins, ['00000011685', 'NUMBER', 55, square_aperture]);

    if (with_lock && selected_lock_code) margins = addExtraMargin(margins, [selected_lock_code, 'STRING', 796, 1]);

    if (with_lock && selected_handle_code) margins = addExtraMargin(margins, [selected_handle_code, 'STRING', 796, 1]);

    if (with_lock && selected_lock_code == '00000131045') margins = addExtraMargin(margins, ['00000129360', 'STRING', 796, 1]);

    if (IsDeepDebug) {
        NoticeMessage += "DEEPDEBUG: construct:<br>";
        NoticeMessage += "==> construct_default [" + construct_default + "]<br>";
        NoticeMessage += "==> defaultConstruct [" + defaultConstruct + "]<br>";
        NoticeMessage += "==> defaultConstructCount [" + defaultConstructCount + "]<br>";
    
        var lst:Array = getList(margins);
        if (lst.length) {
            NoticeMessage += "DEEPDEBUG: margins:<br>";
            for (var i:int=0; i<lst.length; i++) {
                NoticeMessage += "==> [" + lst[i] + "]<br>";
            }
        }
    }
}

// -------------------------
//  Trace: АВТОТРАССИРОВКА
// -------------------------

var IsTrace:Boolean = new Boolean(false);

if (IsTrace) {
    NoticeMessage = 
        "***<br>" +
    NoticeMessage;
}



//
//  =================
//

if (prices_disable) attentionMessage = getSystemOption('prices_disable', currentLocale) + attentionMessage;
if (validation_disable) attentionMessage = getSystemOption('validation_disable', currentLocale) + attentionMessage;
if (isWorkWithout1C) attentionMessage = getSystemOption('isWorkWithout1C', currentLocale) + attentionMessage;
if (withoutRestriction) attentionMessage = getSystemOption('withoutRestriction', currentLocale) + attentionMessage;
if (IsDebug || IsDeepDebug) attentionMessage = getSystemOption('Debug', currentLocale) + attentionMessage;

if (IsDeepDebug) {
    NoticeMessage += 
        "DEEPDEBUG: total images:" + imagePath.length + "<br>" +
        "DEEPDEBUG: imagePath:" + "<br>";
    for (var i=0; i<imagePath.length; i++) {
        NoticeMessage += "==> [" + imagePath[i] + "]<br>";
    }
    NoticeMessage += 
        "DEEPDEBUG: imageVisibility:" + imageVisibility.toString() + "<br>" +
        "DEEPDEBUG: imageX:" + imageX.toString() + "<br>" +
        "DEEPDEBUG: imageY:" + imageY.toString() + "<br>";
}

setImageURI = common_image ? 'images/' + common_image + '/' + image : country_path + default_image + image;

if (IsDeepDebug) {
    NoticeMessage += 
        "DEEPDEBUG: setImageURI:" + setImageURI + "<br>";
}

++scriptExecCount;

NoticeMessage += (NoticeMessage ? '<br>' : '') + '* * * <br>Generated by Helpgen.py, version 2.37 beta © <br>Product Release 1.00 41827.0<br>Date: 2014-09-13 07:49'

