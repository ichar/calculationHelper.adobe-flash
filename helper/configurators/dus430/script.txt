// SingleWicketDUS430
// ------------------
// Generated by Helpgen.py, version 2.44 beta © 
// Date: 2015-07-01 11:56

wizardID = 'SingleWicketDUS430';

var IsDebug:Boolean = new Boolean(false);
var IsDeepDebug:Boolean = new Boolean(false);
var IsLoad:Boolean = new Boolean(false);
var IsForcedValidation:Boolean = new Boolean(false);

var validation_disable:Boolean = new Boolean(false);
var prices_disable:Boolean = new Boolean(false);

if (!(IsExist('helperReset') && helperReset)) 
{

// ------------------------------------
//  #S.Globals: ГЛОБАЛЬНЫЕ ОПРЕДЕЛЕНИЯ
// ------------------------------------

var country_path:String = '';
var now:Date = new Date();

isWorkWithout1C = false;

var common_image:String = '';
var image:String = 'default.jpg';

NoticeMessage = "";

var country:String = countryID ? countryID.toUpperCase() : '';
country_path = ''; // currentLocale.toLowerCase();

var string_delimeter:String = 'x';

image = 'default.jpg';
var defaultImage:String = image;

//IsForcedValidation = true;

//if (IsExist('helperProductControl')) helperProductControl.enabled = true;

var shield_enabled:Number = 1;
var power_rack_enabled:Number = 1; //Compound_GateOnly ? 0 : 1;

var selected_outer_design:String = '';
var selected_outer_composition:String = '';
var selected_outer_color:String = '';

var outer_composition_valid:Boolean = true;

var IsOuterDesignPanel:Boolean = false;
var IsOuterDesignWideBand:Boolean = false;
var IsOuterDesignPremium:Boolean = false;
var IsOuterDesignPremiumClassic:Boolean = false;
var IsOuterDesignPremiumCountry:Boolean = false;
var IsOuterDesignPremiumHiTech:Boolean = false;

var selected_inner_design:String = '';
var selected_inner_composition:String = '';

var inner_composition_valid:Boolean = true;

var IsInnerDesignPanel:Boolean = false;

function setItemMutualValue(name:String, item_default:String) {
    if (IsTrue(name) && changedFormFieldID != name) {
        setValue(name, false);
        setValue(item_default, true);
        objectStatus[name] = 0;
    }
}

function setDisabledValue(name:String, item_default:String) {
    setItemMutualValue(name, item_default);
    if (IsFalse(name))
        objectStatus[name] = 0;
}

function checkStatusOfProductInfoGroup() {
    objectStatus["SquareClearance"] = 
    objectStatus["ObstacleDistance"] = 
    objectStatus["Opening_Left"] = 
    objectStatus["Opening_Right"] = 
    objectStatus["ColumnMaterialTitle_1"] = 
    objectStatus["ColumnMaterial_List"] = 
    objectStatus["FenceMaterialTitle_1"] = 
    objectStatus["FenceMaterial_List"] = 
    objectStatus["GroundMaterialTitle_1"] = 
    objectStatus["GroundMaterial_List"] = 
    shield_enabled;
}

var no_sandwich_panel:Boolean = false;
var no_window:Boolean = false;
var no_door:Boolean = false;
var no_aluminium_profile:Boolean = false;

function checkStatusOfGateShieldGroup() {
    objectStatus["ShieldDelivery_Default"] = 
    objectStatus["ShieldDelivery_Out"] = 
    objectStatus["ShieldForm_Default"] = 
    objectStatus["ShieldForm_Arch"] = 
    objectStatus["ShieldBody_Default"] = 
    objectStatus["ShieldBody_Aluminium_Panel"] = 
    objectStatus["ShieldBody_Aluminium_Profile"] = 
    objectStatus["ShieldDesign_Standard"] = 
    objectStatus["ShieldDesign_List"] = 
    objectStatus["ShieldDesign_Code"] = 
    objectStatus["EdgingColor_Default"] = 
    objectStatus["EdgingColor_NonStandard"] = 
    objectStatus["EdgingColor_List"] = 
    objectStatus["EdgingColor_BySample"] = 
    shield_enabled;

    objectStatus["ShieldBody_Aluminium_Grid"] = ShieldForm_Arch ? 0 : shield_enabled;

    if (!objectStatus["ShieldBody_Aluminium_Grid"] && ShieldBody_Aluminium_Grid) {
        ShieldBody_Aluminium_Grid = false;
        ShieldBody_Default = true;
    }
}

function checkStatusOfSandwichPanelGroup() {
    objectStatus["WithFingersProtection"] = 
    objectStatus["InnerGroupTitle_1"] = 
    no_sandwich_panel ? 0 : shield_enabled;
}

var no_sash_color:Boolean = false;

function checkStatusOfSashColorGroup() {
    var enable_by_default:Number = no_sash_color || !(ShieldBody_Aluminium_Grid || ShieldBody_Aluminium_Profile) ? 0 : 1;

    objectStatus["SashColorStandard"] = objectStatus["SashColorNonStandard"] = objectStatus["SashColor_Custom"] = enable_by_default;
    objectStatus["SashColor_List"] = !SashColor_Custom ? enable_by_default : 0;
    objectStatus["SashColor_Value"] = SashColor_Custom ? enable_by_default : 0;
}

function checkStatusOfPowerRackGroup() {
    objectStatus["WithRack_List"] = 
    objectStatus["RackOptionGroupTitle_1"] = 
    objectStatus["JumperSetup"] = 
    power_rack_enabled;
}

function checkStatusOfEquipmentGroup() {
    objectStatus["AdditionalDevices_1"] = 
    objectStatus["AdditionalDevices_1_Count"] = 
    objectStatus["AdditionalDevices_2"] = 
    objectStatus["AdditionalDevices_2_Count"] = 
    objectStatus["AdditionalDevices_3"] = 
    objectStatus["AdditionalDevices_3_Count"] = 
    objectStatus["AdditionalDevices_4"] = 
    objectStatus["AdditionalDevices_4_Count"] = 
    objectStatus["AdditionalDevices_5"] = 
    objectStatus["AdditionalDevices_5_Count"] = 
    objectStatus["AdditionalDevices_6"] = 
    objectStatus["AdditionalDevices_6_Count"] = 
    objectStatus["AdditionalDevices_7"] = 
    objectStatus["AdditionalDevices_7_Count"] = 
    objectStatus["AdditionalDevices_8"] = 
    objectStatus["AdditionalDevices_8_Count"] = 
    objectStatus["AdditionalDevices_9"] = 
    objectStatus["AdditionalDevices_9_Count"] = 
    objectStatus["AdditionalDevices_10"] = 
    objectStatus["AdditionalDevices_10_Count"] = 
    objectStatus["AdditionalDevices_11"] = 
    objectStatus["AdditionalDevices_11_Count"] = 
    objectStatus["AdditionalDevices_12"] = 
    objectStatus["AdditionalDevices_12_Count"] = 
    objectStatus["AdditionalDevices_14"] = 
    objectStatus["AdditionalDevices_14_Count"] = 
    objectStatus["AdditionalDevices_15"] = 
    objectStatus["AdditionalDevices_15_Count"] = 
    shield_enabled;
}

function checkStatusOfExpendableMaterialsGroup() {
    objectStatus["ExpendableMaterials_ControlCabel_2"] = 
    objectStatus["ExpendableMaterials_ControlCabel_2_Count"] = 
    objectStatus["ExpendableMaterials_PowerCabel_3"] = 
    objectStatus["ExpendableMaterials_PowerCabel_3_Count"] = 
    objectStatus["ExpendableMaterials_PowerCabel_4"] = 
    objectStatus["ExpendableMaterials_PowerCabel_4_Count"] = 
    objectStatus["ExpendableMaterials_CorrugatedPlastic"] = 
    objectStatus["ExpendableMaterials_CorrugatedPlastic_Count"] = 
    objectStatus["ExpendableMaterials_CorrugatedMetallic"] = 
    objectStatus["ExpendableMaterials_CorrugatedMetallic_Count"] = 
    objectStatus["ExpendableMaterials_CorrugatedAttachement_20"] = 
    objectStatus["ExpendableMaterials_CorrugatedAttachement_20_Count"] = 
    shield_enabled;
}

var max_square_height:Number = 0;
var max_square_width:Number = 0;

function checkSquareHeightWidth(max_square_height:Number, max_square_width:Number, word_shield_body:String, word_more_less:String) {
    if (SquareWidth > max_square_width && SquareHeight > max_square_height)
    {
        helperErrorCode = -3;
        helperErrorMessage = ExtraSquareHeightMessage
            .replace('CCC', word_shield_body + ' ' + word_and + ' ' + word_more_less + ' ' + max_square_width)
            .replace('---', word_more)
            .replace('XXX', max_square_height.toString());
    }
}

var square_aperture:Number = 0;

blockConstructSquare();

function setGateShield() {
    no_sandwich_panel = no_window = no_door = ShieldBody_Aluminium_Profile ? true : false; // || ShieldBody_Aluminium_Grid
    no_aluminium_profile = ShieldBody_Default || ShieldBody_Aluminium_Panel ? true : false;
}

function checkStatusOfHingedRack() {
    if (ShieldForm_Arch) {
        setDisabledValue('HingedRack_WithJumper', 'HingedRack_WithoutJumper');
    }
}

function setShieldDesign(article:String, code:String)
{
    ShieldDesign_up = article;
    ShieldDesign_Code = code ? code : word_not_defined;
}

var selected_shield_article:String = '';
var selected_shield_code:String = '';

function setShieldDesignValue(value:String) {
    if (IsDeepDebug) {
        NoticeMessage += 
            "DEEPDEBUG: setShieldDesignValue started<br>" +
            "";
    }

    if (value) ShieldDesign_List = value;

    getShieldDesignValue();
}

function getShieldDesignValue() {
    var selected_index:Number = getListSelectedIndex(ShieldDesign_List);
    if (IsDebug) NoticeMessage += "DEBUG: ShieldDesign selected_index [" + selected_index + "]<br>";

    if (selected_index > getListLength(ShieldDesign_List) - 1)
    {
        helperErrorCode = -3;
        helperErrorMessage = "Выбран неиндексируемый элемент списка ShieldDesign: [" + selected_index + "]";
    }

    var item:Array = getListItem(ShieldDesign_List, selected_index);
    if (IsDebug) NoticeMessage += "DEBUG: item length [" + item.length + "]<br>";

    if (item.length != 3)
    {
        helperErrorCode = -3;
        helperErrorMessage = "Некорректная длина элемента списка ShieldDesign: [" + item.length + "]";
    }

    selected_shield_article = item[0];  // артикул
    selected_shield_code = item[2];     // код наценки

    if (IsDeepDebug) {
        NoticeMessage += 
            "DEEPDEBUG: selected_shield_article [" + selected_shield_article + "]<br>" +
            "DEEPDEBUG: selected_shield_code [" + selected_shield_code + "]<br>" +
            "DEEPDEBUG: item [" + item.toString() + "]<br>" +
            "";
    }
}

function setLatticeHeight() {
    if (!is_LatticeHeight_changed)
    {
        if (selected_shield_article && constLatticeHeight_default.indexOf(selected_shield_article) > -1)
        {
            var x:Number = Math.floor(SquareHeight / 4);
            LatticeHeight = x >= minLatticeHeight ? x : default_lattice_height;
        }
    }

    LatticeHeight_up = objectStatus["LatticeHeight"] ? LatticeHeight : 0;
}

function checkArchHeight() {
    if (maxArchHeight < minArchHeight) {
        minArchHeight = maxArchHeight;
    }
}

function checkStatusOfOuterDesign() {
    objectStatus["OuterDesign_List"] = no_sandwich_panel ? 0 : 1;
}

function setOuterDesign() {
    selected_outer_design = getListSelectedItem(OuterDesign_List, 0);
    outerDesign_up = getListValidName(OuterDesign_List, selected_outer_design);

    IsOuterDesignPanel = selected_outer_design == 'Panel' ? true : false;
    IsOuterDesignWideBand = selected_outer_design == 'WideBand' ? true : false;
    IsOuterDesignPremium = IsStringStartedWith(selected_outer_design, 'Premium') ? true : false;
    IsOuterDesignPremiumClassic = selected_outer_design == 'PremiumClassic' ? true : false;
    IsOuterDesignPremiumCountry = selected_outer_design == 'PremiumCountry' ? true : false;
    IsOuterDesignPremiumHiTech = selected_outer_design == 'PremiumHiTech' ? true : false;
}

objectStatus["ShieldOuterDesignTitle_1"] = default_title_enable;

var IsOuterColorChanged:Boolean = false;
var IsColorImageHidden:Boolean = OuterColor_Custom ? true : false;

function checkStatusOfOuterComposition() {
    if (IsOuterDesignPremium) {
        objectStatus["OuterComposition_List"] = 0;
        outer_composition_valid = false;
    } else {
        objectStatus["OuterComposition_List"] = no_sandwich_panel ? 0 : shield_enabled;
        outer_composition_valid = true;
    }

    if (!objectStatus["OuterComposition_List"] && selected_outer_composition) {
        outerComposition_up = '';
    }
}

function setOuterComposition() {
    if (getListLength(OuterComposition_List)) {
        selected_outer_composition = getListSelectedItem(OuterComposition_List, 0);
        outerComposition_up = getListValidName(OuterComposition_List, selected_outer_composition);
    }
}

function checkStatusOfPremiumDesign() {
    objectStatus["PremiumDesign_A"] = objectStatus["PremiumDesign_B"] = IsOuterDesignPremium && !no_sandwich_panel ? shield_enabled : 0;
    objectStatus["PremiumDesign_C"] = objectStatus["PremiumDesign_D"] = IsOuterDesignPremiumHiTech && !no_sandwich_panel ? shield_enabled : 0;
}

function setPremiumDesign() {
    if ((PremiumDesign_C || PremiumDesign_D) && !IsOuterDesignPremiumHiTech) {
         PremiumDesign_B = PremiumDesign_C = PremiumDesign_D = false;
         PremiumDesign_A = true;
    }
}

function initOuterColor() {
    if (IsOuterDesignPremiumClassic || IsOuterDesignPremiumCountry) {
        OuterColorNonStandard = OuterColorWood = OuterColor_Custom = false;
        OuterColorStandard = true;
    }

    var source:String = '';
    var default_color = '';

    if (OuterColorStandard) {
        if (IsOuterDesignPremiumClassic || IsOuterDesignPremiumCountry) {
            source = listOuterColorPremium;
            default_color = default_outer_color_premium;
        } else {
            source = listOuterColorStandard;
            default_color = default_outer_color_standard;
        }
    }
    else if (OuterColorNonStandard) {
        source = listOuterColorNonStandard;
        default_color = default_outer_color_nonstandard;
    }
    else if (OuterColorWood) {
        source = listOuterColorWood;
        default_color = default_outer_color_wood;
    }
    else if (OuterColor_Custom) {
        OuterColor_Value = default_outer_color_custom ? parseInt(default_outer_color_custom) : 0;
    }

    if (source)
        OuterColor_List = blockItems('OuterColor_List', [], source);
    if (default_color)
        OuterColor_List = setListSelectedIndexById(OuterColor_List, default_color);
}

function checkStatusOfOuterColor() {
    var premium_enabled:Boolean = (IsOuterDesignPremiumClassic || IsOuterDesignPremiumCountry) ? true : false;
    var enable_by_default:Number = shield_enabled && !no_sandwich_panel ? 1 : 0;

    objectStatus["OuterColorStandard"] = enable_by_default;
    objectStatus["OuterColorNonStandard"] = objectStatus["OuterColorWood"] = premium_enabled ? 0 : enable_by_default;
    if (premium_enabled && (OuterColorNonStandard || OuterColorWood)) {
        OuterColorNonStandard = OuterColorWood = false;
        OuterColorStandard = true;
    }

    objectStatus["OuterColor_Custom"] = IsOuterDesignPremium ? 0 : enable_by_default;

    objectStatus["OuterColor_List"] = !OuterColor_Custom ? enable_by_default : 0;
    objectStatus["OuterColor_Value"] = OuterColor_Custom ? enable_by_default : 0;
}

function setOuterColor() {
    if (no_sandwich_panel)
        outerColor_up = selected_outer_color = '';
    else if (OuterColor_Custom)
        outerColor_up = selected_outer_color = makeRAL(OuterColor_Value);
    else
        outerColor_up = selected_outer_color = getListSelectedItem(OuterColor_List, 0);
}

var IsColorImageDisabled:Boolean = false;

var image_path:String = country_path + default_image;

function removeColorImage(index:Number)
{
    if (imagePath.length > index) {
        imageVisibility[index] = false;
    }
}

function addImage(index:Number)
{
    if (imagePath.length < index + 1)
    {
        imagePath.push('');
        imageVisibility.push(false);
        imageX.push(0);
        imageY.push(0);
    }
}

function setColorImage(index:Number)
{
    if (IsColorImageDisabled) {
        return;
    }

    if (!IsOuterColorChanged || IsColorImageHidden)
    {
        removeColorImage(index);
        return;
    }

    addImage(index);

    var p:String = new String('');
    var v:String = new String('');

    if (index == 0) {
        p = 'outer';
        v = selected_outer_color;
        imageX[index] = 0;
        imageY[index] = 310;
    } else {
        p = 'inner';
        v = selected_inner_color;
        imageX[index] = 230;
        imageY[index] = 310;
    }

    imagePath[index] = image_path + p + '-color-' + v + '.jpg';
    imageVisibility[index] = true;
}

function setCompositionColorImage(index:Number)
{
    if (IsColorImageDisabled) {
        initDefaultImage();
        image = defaultImage;
        return;
    }

    if (!IsOuterColorChanged || IsColorImageHidden || !selected_outer_composition)
    {
        removeColorImage(index);
        return;
    }

    addImage(index);

    var v:String = selected_outer_composition.toLowerCase();

    imageX[index] = 0;
    imageY[index] = 450;
    imagePath[index] = image_path + 'composition-' + v + '-small.png';
    imageVisibility[index] = true;
}

var selected_inner_color:String = '';

function initSashColor() {
    if (SashColorStandard) {
        SashColor_List = listSashColorStandard;
        if (default_sash_color_standard)
            SashColor_List = setListSelectedIndexById(SashColor_List, default_sash_color_standard);
    }
    else if (SashColorNonStandard) {
        SashColor_List = listSashColorNonStandard;
        if (default_sash_color_nonstandard)
            SashColor_List = setListSelectedIndexById(SashColor_List, default_sash_color_nonstandard);
    }
    else if (SashColor_Custom) {
        SashColor_Value = default_sash_color_custom ? parseInt(default_sash_color_custom) : 0;
    }
}

function checkStatusOfSashColor() {}

function setSashColor() {
    //no_sash_color = shield_enabled && !no_sandwich_panel ? true : false;

    if (SashColor_Custom)
        sashColor_up = makeRAL(SashColor_Value);
    else
        sashColor_up = getListSelectedItem(SashColor_List, 0);

    if (no_aluminium_profile || no_sash_color) sashColor_up = '';
}

function initEdgingColor() {
    if (getListLength(EdgingColor_List) == 0 || scriptExecCount == 0)
        EdgingColor_List = listEdgingColorNonStandard;

    if (EdgingColorStandard)
        return;
    else if (EdgingColorNonStandard) {
        if (default_edging_color_nonstandard)
            EdgingColor_List = setListSelectedIndexById(EdgingColor_List, default_edging_color_nonstandard);
    }
    else if (EdgingColor_Custom)
        EdgingColor_Value = default_edging_color_custom ? parseInt(default_edging_color_custom) : 0;
}

function checkStatusOfEdgingColor() {
    var enable_by_default:Number = shield_enabled ? 1 : 0;

    objectStatus["EdgingColorStandard"] = OuterColorWood ? 0 : 1;
    objectStatus["EdgingColorNonStandard"] = objectStatus["EdgingColor_Custom"] = enable_by_default;
    objectStatus["EdgingColor_List"] = EdgingColorNonStandard ? enable_by_default : 0;
    objectStatus["EdgingColor_Value"] = EdgingColor_Custom ? enable_by_default : 0;
}

function setEdgingColor() {
    if (EdgingColorStandard) {
        if (no_sandwich_panel) {
            edgingColor_up = sashColor_up;
        } else if (OuterColorWood) {
            EdgingColor_List = setListSelectedIndexById(EdgingColor_List, default_edging_color); 
            edgingColor_up = getListSelectedItem(EdgingColor_List, 0);
            objectStatus["EdgingColorStandard"] = 0;
            EdgingColorStandard = false;
            EdgingColorNonStandard = true;
        } else {
            edgingColor_up = outerColor_up;
        }
        EdgingColor_Value = parseInt(edgingColor_up);
    }
    else if (EdgingColor_Custom)
        edgingColor_up = makeRAL(EdgingColor_Value);
    else
        edgingColor_up = getListSelectedItem(EdgingColor_List, 0);

    if (isNaN(EdgingColor_Value)) EdgingColor_Value = 0;
}

var with_rack:Boolean = false;
var selected_rack_code:String = '';

function checkStatusOfWithRack() {
    objectStatus["WithRackTitle_1"] = objectStatus["WithRack_List"] = power_rack_enabled;
}

function setWithRack() {
    var x:Array = getListSelectedValue(WithRack_List);
    withRack_up = x[0];
    selected_rack_code = x[2];
    with_rack = withRack_up && withRack_up != 'no' ? true : false;
}

function initRackColor() {
    if (getListLength(RackColor_List) == 0 || scriptExecCount == 0)
        RackColor_List = listRackColorNonStandard;

    if (RackColorStandard)
        return;
    else if (RackColorNonStandard) {
        if (default_rack_color_nonstandard)
            RackColor_List = setListSelectedIndexById(RackColor_List, default_rack_color_nonstandard);
    }
    else if (RackColor_Custom)
        RackColor_Value = default_rack_color_custom ? parseInt(default_rack_color_custom) : 0;
}

function checkStatusOfRackColor() {
    var enable_by_default:Number = with_rack ? power_rack_enabled : 0;

    objectStatus["RackColorStandard"] = objectStatus["RackColorNonStandard"] = objectStatus["RackColor_Custom"] = enable_by_default;
    objectStatus["RackColor_List"] = RackColorNonStandard ? enable_by_default : 0;
    objectStatus["RackColor_Value"] = RackColor_Custom ? enable_by_default : 0;
    objectStatus["RackColorType_Mat"] = objectStatus["RackColorType_Glossy"] = objectStatus["RackColorType_Alkyd"] = enable_by_default;
}

function setRackColor() {
    if (!with_rack)
        rackColor_up = '';
    else if (RackColorStandard) {
        rackColor_up = OuterColorWood || IsOuterDesignPremiumClassic ? default_rack_color : (ShieldBody_Default || ShieldBody_Aluminium_Panel ? outerColor_up : sashColor_up);
        RackColor_Value = parseInt(rackColor_up);
    }
    else if (RackColor_Custom)
        rackColor_up = RackColor_Value.toString();
    else
        rackColor_up = getListSelectedItem(RackColor_List, 0);

    if (isNaN(RackColor_Value)) RackColor_Value = 0;
}

var with_lock:Boolean = false;         // замок для установки
var selected_lock_code:String = '';    // код наценки

function checkStatusOfWithLock() {
    objectStatus["WithLockTitle_1"] = objectStatus["WithLock_List"] = 
    shield_enabled ? 1 : 0;
}

function setWithLock() {
    var x:Array = getListSelectedValue(WithLock_List);
    withLock_up = x[0];
    selected_lock_code = x[2];
    with_lock = withLock_up && withLock_up != 'no' ? true : false;
}

function setHandle() {
    if (IsLoad)
        withLock_up = getListSelectedItem(WithLock_List, 0);
    if (Opening_Outside)
        WithLock_List = listWithLock1;
    else if (Opening_Inside && Hinge_Left)
        WithLock_List = listWithLock2;
    else if (Opening_Inside && Hinge_Right)
        WithLock_List = listWithLock3;
    if (IsLoad && withLock_up)
        WithLock_List = setListSelectedIndexById(WithLock_List, withLock_up);
}

var with_aluminium_handle:Boolean = false;         // ручка алюминиевая для установки
var selected_aluminium_handle_code:String = '';    // код наценки
var no_aluminium_handle:Boolean = false;

function checkStatusOfWithAluminiumHandle() {
    objectStatus["WithAluminiumHandleTitle_1"] = objectStatus["WithAluminiumHandle_List"] = 
    shield_enabled && !no_aluminium_handle ? 1 : 0;
}

function setWithAluminiumHandle() {
    if (no_aluminium_handle) {
        withAluminiumHandle_up = selected_aluminium_handle_code = '';
        return;
    }

    var x:Array = getListSelectedValue(WithAluminiumHandle_List);
    withAluminiumHandle_up = x[0];
    selected_aluminium_handle_code = x[2];
    with_aluminium_handle = withAluminiumHandle_up && withAluminiumHandle_up != 'no' ? true : false;
}

function checkColorListMatched(outer:String, colors:Array, index:int):Boolean
{
    var selected_index:int = getListSelectedIndex(outer);
    var item:Array = getListItem(outer, selected_index);
    if (!item || item.length < 1) return false;

    var name:String = item[0];          // наименование цвета

    var color:Array = name.split(' ');
    if (color.length < index+1) return false;

    var code:String = color[index];     // код цвета
    if (!code) return false;

    return colors.indexOf(code) == -1 ? false : true;
}

function addColorMargins(outer:String, lst:Array, index:int)
{
    for (var i:int=0; i < lst.length; i++) {
        var x:Array = lst[i].split(':');
        if (x.length > 1) {
            var colors:Array = strip(x[0]).split('-');
            var margin:String = strip(x[1]);
            if (colors.length > 0 && margin && checkColorListMatched(outer, colors, index))
            {
                margins = addMargin(margins, [margin, 'NUMBER', 796, 1]);
            }
        }
    }
}

function checkColorListMatched(outer:String, colors:Array, index:int):Boolean
{
    var selected_index:int = getListSelectedIndex(outer);
    var item:Array = getListItem(outer, selected_index);
    if (!item || item.length < 1) return false;

    var name:String = item[0];          // наименование цвета

    var color:Array = name.split(' ');
    if (color.length < index+1) return false;

    var code:String = color[index];     // код цвета
    if (!code) return false;

    return colors.indexOf(code) == -1 ? false : true;
}

function addColorMargins(outer:String, lst:Array, index:int)
{
    for (var i:int=0; i < lst.length; i++) {
        var x:Array = lst[i].split(':');
        if (x.length > 1) {
            var colors:Array = strip(x[0]).split('-');
            var margin:String = strip(x[1]);
            if (colors.length > 0 && margin && checkColorListMatched(outer, colors, index))
            {
                margins = addMargin(margins, [margin, 'NUMBER', 796, 1]);
            }
        }
    }
}

//
//  ========================================================================
//

if (IsDebug) NoticeMessage += "DEBUG: scriptExecCount [" + scriptExecCount + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: changedFormFieldID [" + changedFormFieldID + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: isConfirmation [" + isConfirmation + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: confirmCode [" + confirmCode + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: withoutRestriction [" + withoutRestriction + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: currentLocale [" + currentLocale + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: defaultProduct [" + defaultProduct + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: priceTypeID [" + priceTypeID + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: helperVersion [" + helperVersion + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: wizardID [" + wizardID + "]<br>";

// -------------------------------------------------
//  #S.Init: ИНИЦИАЛИЗАЦИЯ (ПАРАМЕТРЫ ПО УМОЛЧАНИЮ)
// -------------------------------------------------

if (!scriptExecCount)
{
    scriptExecCount = 0;

    //if (IsExist('showOnStartup')) showOnStartup = 'none'; //GarageInfoGroup

    SquareWidth = default_square_width;

    SquareHeight = default_square_height;

    SquareClearance = default_square_clearance;

    Hinge_Right = true;

    ShieldDesign_List = listShieldDesignValue;

    LatticeHeight = default_lattice_height;

    OuterDesign_List = listOuterDesign;
    if (default_outer_design) OuterDesign_List = setListSelectedIndexById(OuterDesign_List, default_outer_design);

    if (default_outer_composition) OuterComposition_List = setListSelectedIndexById(OuterComposition_List, default_outer_composition);

    OuterColorStandard = true;
    initOuterColor();

    SashColorStandard = true;
    initSashColor();

    initEdgingColor();

    WithRack_List = listWithRack;
    if (default_with_rack)
        WithRack_List = setListSelectedIndexById(WithRack_List, default_with_rack);

    initRackColor();

    WithLock_List = listWithLock;
    if (default_with_lock)
        WithLock_List = setListSelectedIndexById(WithLock_List, default_with_lock);

    WithAluminiumHandle_List = listWithAluminiumHandle;
    if (default_with_aluminium_handle)
        WithAluminiumHandle_List = setListSelectedIndexById(WithAluminiumHandle_List, default_with_aluminium_handle);
}
else

// ---------------------------------
//  #S.Load: ЗАГРУЗКА/РАСЧЕТ ЗАКАЗА
// ---------------------------------

if (scriptExecCount > 0 && !changedFormFieldID)
{
    IsLoad = true;

    SquareWidth = SquareWidth_up ? SquareWidth_up : default_square_width;

    SquareHeight = SquareHeight_up ? SquareHeight_up : default_square_height;

    SquareClearance = SquareClearance_up ? SquareClearance_up : default_square_clearance;

    if (ShieldDesign_up) {
        // выбранное значение списка соответствует стандартной модели щита
        ShieldDesign_List = setListSelectedIndexById(ShieldDesign_List, ShieldDesign_up);
    }

    if (LatticeHeight_up) {
        LatticeHeight = LatticeHeight_up;
        is_LatticeHeight_changed = 1;
    }

    PicHeight = PicHeight_up ? PicHeight_up : default_pic_height;

    ArchHeight = ArchHeight_up ? ArchHeight_up : default_arch_height;

    if (IsDebug) 
        NoticeMessage += "DEBUG: OuterDesign Index [" + getListSelectedIndex(OuterDesign_List) + "]<br>";
    
    setOuterDesign();

    if (outerComposition_up) {
        selected_outer_composition = getListValidId(OuterComposition_List, outerComposition_up);
        OuterComposition_List = setListSelectedIndexById(OuterComposition_List, selected_outer_composition);
    
        if (IsDebug) 
            NoticeMessage += "DEBUG: OuterComposition Index [" + getListSelectedIndex(OuterComposition_List) + "]<br>";
    }

    initOuterColor();
    if (outerColor_up) {
        if (OuterColor_Custom)
            OuterColor_Value = outerColor_up;
        else
            OuterColor_List = setListSelectedIndexById(OuterColor_List, outerColor_up); 
    }

    initSashColor();
    if (sashColor_up) {
        if (SashColor_Custom)
            SashColor_Value = sashColor_up;
        else
            SashColor_List = setListSelectedIndexById(SashColor_List, sashColor_up); 
    }

    initEdgingColor();
    if (edgingColor_up) {
        if (EdgingColorStandard || EdgingColor_Custom)
            EdgingColor_Value = edgingColor_up;
        else
            EdgingColor_List = setListSelectedIndexById(EdgingColor_List, edgingColor_up); 
    }

    if (IsDebug) 
        NoticeMessage += "DEBUG: WithRack Index [" + getListSelectedIndex(WithRack_List) + "]<br>";

    initRackColor();
    if (rackColor_up) {
        if (RackColorStandard || RackColor_Custom)
            RackColor_Value = rackColor_up;
        else
            RackColor_List = setListSelectedIndexById(RackColor_List, rackColor_up); 
    }

    if (IsDebug) 
        NoticeMessage += "LOAD DEBUG: WithLock Index [" + getListSelectedIndex(WithLock_List) + "]<br>";

    if (IsDebug) 
        NoticeMessage += "DEBUG: WithAluminiumHandle Index [" + getListSelectedIndex(WithAluminiumHandle_List) + "]<br>";

    if (constSavedImage && constSavedImage != defaultImage && scriptExecCount > 0) image = constSavedImage;
}



// ---------------------------------
//  #S.Begin: НАЧАЛЬНЫЕ ОПРЕДЕЛЕНИЯ
// ---------------------------------

setGateShield();

setOuterDesign();

setPremiumDesign();

// базовая цена - основное изделие
construct_default = 1;

// --------------------------------------
//  #S.OnChange: ОБРАБОТКА СОБЫТИЙ ФОРМЫ
// --------------------------------------

if (changedFormFieldID)
{
    if (changedFormFieldID == 'SquareWidth') {
        is_ArchHeight_changed = 0;
    }

    if (changedFormFieldID == 'SquareHeight') {
        is_LatticeHeight_changed = 0;
        is_PicHeight_changed = 0;
    }

    if (changedFormFieldID == 'SquareHeight') {
        is_LatticeHeight_changed = 0;
    }

    if (changedFormFieldID == 'SquareWidth' || !maxArchHeight) {
        maxArchHeight = Math.floor((SquareWidth - 115) / 2);
    }

    if (changedFormFieldID == 'OuterComposition_List' && shield_enabled) {
        var x:String = selected_outer_composition.toLowerCase();
        image = x.length > 0 ? 'composition-' + x + '.jpg' : defaultImage;
    }

    var ids:Array = new Array('PremiumDesign_A', 'PremiumDesign_B', 'PremiumDesign_C', 'PremiumDesign_D');
    if (ids.indexOf(changedFormFieldID) > -1 && IsOuterDesignPremium && shield_enabled) {
        if (IsOuterDesignPremiumClassic) {
            image = PremiumDesign_A ? 'premium-classic-a.jpg' : 'premium-classic-b.jpg';
        }
        if (IsOuterDesignPremiumHiTech) {
            if (PremiumDesign_A)
                image = 'premium-hi-tech-a.jpg';
            else if (PremiumDesign_B)
                image = 'premium-hi-tech-b.jpg';
            else if (PremiumDesign_C)
                image = 'premium-hi-tech-c.jpg';
            else if (PremiumDesign_D)
                image = 'premium-hi-tech-d.jpg';
        }
    }    

    var ids:Array = new Array('SashColorStandard', 'SashColorNonStandard', 'SashColor_Custom');
    if (ids.indexOf(changedFormFieldID) > -1) {
        initSashColor();
    }

    var ids:Array = new Array('EdgingColorStandard', 'EdgingColorNonStandard', 'EdgingColor_Custom');
    if (ids.indexOf(changedFormFieldID) > -1) {
        initEdgingColor();
    }

    var ids:Array = new Array('RackColorStandard', 'RackColorNonStandard', 'RackColor_Custom');
    if (ids.indexOf(changedFormFieldID) > -1) {
        initRackColor();
    }
}



// -------------------------------------------------
//  #S.OnControl: ИНТЕРАКТИВНЫЙ КОНТРОЛЬ ПАРАМЕТРОВ
// -------------------------------------------------

if (scriptExecCount > 0 && IsExist('helperProductControl') && helperProductControl['active'])
{

}

// --------------------------------
//  #S.Main: УСТАНОВКА КОНСТРУКЦИИ
// --------------------------------

if (helperErrorCode == 0)
{
    SquareWidth_up = SquareWidth;

    SquareHeight_up = SquareHeight;

    square_aperture = (SquareWidth * SquareHeight) / 1000000;
    SquareAperture = roundNumber(square_aperture, 2, false);

    SquareClearance_up = SquareClearance;

    if (scriptExecCount > 0) {
        selected_shield_article = ShieldDesign_up;
        selected_shield_code = ShieldDesign_Code;
    }
    
    var ids:Array = new Array('ShieldDesign_List', 
                              'ShieldForm_Default', 'ShieldForm_Arch', 
                              'ShieldBody_Default', 'ShieldBody_Aluminium_Panel', 'ShieldBody_Aluminium_Profile', 'ShieldBody_Aluminium_Grid'
    );
    if (ids.indexOf(changedFormFieldID) > -1 || !scriptExecCount || IsLoad) {
        /*
        is_LatticeHeight_changed = 0;
        is_PicHeight_changed = 0;
        is_ArchHeight_changed = 0;
        */
    
        if (changedFormFieldID == 'ShieldDesign_List') {
            setShieldDesignValue('');
        }
        else if (ShieldForm_Default && (ShieldBody_Default || ShieldBody_Aluminium_Panel)) { 
            setShieldDesignValue(listShieldDesignValue11);
        }
        else if (ShieldForm_Default && ShieldBody_Aluminium_Profile) {
            setShieldDesignValue(listShieldDesignValue12);
        }
        else if (ShieldForm_Default && ShieldBody_Aluminium_Grid) {
            setShieldDesignValue(listShieldDesignValue13);
        }
        else if (ShieldForm_Arch && (ShieldBody_Default || ShieldBody_Aluminium_Panel)) { 
            setShieldDesignValue(listShieldDesignValue21);
        }
        else if (ShieldForm_Arch && ShieldBody_Aluminium_Profile) {
            setShieldDesignValue(listShieldDesignValue22);
        }
        else if (ShieldForm_Arch && ShieldBody_Aluminium_Grid) {
            setShieldDesignValue(listShieldDesignValue23);
        }
        else {
            setShieldDesignValue(listShieldDesignValue);
        }
    
        if (IsLoad && ShieldDesign_up) {
            ShieldDesign_List = setListSelectedIndexById(ShieldDesign_List, ShieldDesign_up);
            getShieldDesignValue();
        }
    }
    
    setShieldDesign(selected_shield_article, selected_shield_code);

    if (selected_shield_article) {
        if (constLatticeHeight_default.indexOf(selected_shield_article) > -1) {
            objectStatus["LatticeHeight"] = objectStatus["LatticeStep"] = shield_enabled;
        } else {
            objectStatus["LatticeHeight"] = objectStatus["LatticeStep"] = 0;
        }
    }

    if (selected_shield_article) {
        if (constLatticeStep_default.indexOf(selected_shield_article) > -1) {
            objectStatus["LatticeStep"] = shield_enabled;
        } else {
            objectStatus["LatticeStep"] = 0;
        }
        if (!objectStatus["LatticeStep"]) LatticeStep = 0;
    }

    if (constLatticeStep_80.indexOf(selected_shield_article) > -1 && !LatticeStep) LatticeStep = 80;

    if (constLatticeStep_200.indexOf(selected_shield_article) > -1) LatticeStep = 200;

    if (selected_shield_article) {
        if (constPicHeight_default.indexOf(selected_shield_article) > -1) {
            objectStatus["PicHeight"] = shield_enabled;
        } else {
            objectStatus["PicHeight"] = 0;
        }
    }

    maxPicHeight = Math.floor(SquareHeight / 2);
    
    if (['PicHeight'].indexOf(changedFormFieldID) > -1) {
        if (validation_disable || withoutRestriction) {
            is_PicHeight_changed = 1;
        } else if (PicHeight < minPicHeight || PicHeight > maxPicHeight) {
            helperErrorCode = -3;
            helperErrorMessage = PicHeightMessage.replace('MIN', minPicHeight.toString()).replace('MAX', maxPicHeight.toString());
        } else {
            is_PicHeight_changed = 1;
        }
    } else if (!is_PicHeight_changed && !IsLoad) {
        if (!PicHeight)
            PicHeight = Math.floor(SquareHeight * 0.12);
        if (PicHeight < minPicHeight) 
            PicHeight = minPicHeight;
    }

    if (selected_shield_article) {
        if (constArchHeight_default.indexOf(selected_shield_article) > -1) {
            objectStatus["ArchHeight"] = shield_enabled;
        } else {
            objectStatus["ArchHeight"] = 0;
        }
    }

    if (['ArchHeight'].indexOf(changedFormFieldID) > -1) {
        checkArchHeight();
    
        if (validation_disable || withoutRestriction) {
            is_ArchHeight_changed = 1;
        } else if (ArchHeight < minArchHeight || ArchHeight > maxArchHeight) {
            helperErrorCode = -3;
            if (minArchHeight == maxArchHeight)
                helperErrorMessage = ExtraArchHeightMessage.replace('XXX', minArchHeight.toString());
            else
                helperErrorMessage = ArchHeightMessage.replace('MIN', minArchHeight.toString()).replace('MAX', maxArchHeight.toString());
        } else {
            is_ArchHeight_changed = 1;
        }
    } else if (!is_ArchHeight_changed && !IsLoad) {
        if (constArchHeight_300.indexOf(selected_shield_article) > -1)
            ArchHeight = minArchHeight = 300;
        else if (constArchHeight_250.indexOf(selected_shield_article) > -1) 
            ArchHeight = minArchHeight = 250;
        else
            ArchHeight = minArchHeight = default_arch_height;
    
        checkArchHeight();
    
        if (ArchHeight < minArchHeight) 
            ArchHeight = minArchHeight;
        if (ArchHeight > maxArchHeight) 
            ArchHeight = maxArchHeight;
    }

    if (['Classic', 'Smooth', 'Wave'].indexOf(selected_outer_design) > -1) {
        OuterComposition_List = listOuterComposition;
        blockListItem('OuterComposition_List', 'Wood');
        OuterComposition_List = setListSelectedIndexById(OuterComposition_List, 'Stucco');
    }

    if (['WideBand', 'Panel'].indexOf(selected_outer_design) > -1) {
        OuterComposition_List = listOuterComposition;
        blockListItem('OuterComposition_List', 'Stucco');
        OuterComposition_List = setListSelectedIndexById(OuterComposition_List, 'Wood');
    }

    if (changedFormFieldID == 'OuterDesign_List' && IsOuterDesignPremiumHiTech)
        OuterComposition_List = listOuterComposition;

    setOuterComposition();

    checkStatusOfPremiumDesign();

    checkStatusOfOuterColor();

    var ids:Array = new Array('OuterColorStandard', 'OuterColorNonStandard', 'OuterColorWood', 'OuterColor_Custom', 'OuterDesign_List');
    if (ids.indexOf(changedFormFieldID) > -1) {
        initOuterColor();
    }
    setOuterColor();

    objectStatus["InnerPremiumSetup"] = no_sandwich_panel || !IsOuterDesignPremium ? 0 : shield_enabled;
    if (!IsOuterDesignPremium && InnerPremiumSetup) InnerPremiumSetup = false;

    innerDesign_up = default_inner_design;

    innerComposition_up = default_inner_composition;

    if (IsOuterDesignPremiumClassic && InnerPremiumSetup) {
        innerDesign_up = outerDesign_up;
        innerComposition_up = ''
    }

    if (IsOuterDesignPremiumHiTech && InnerPremiumSetup) {
        innerDesign_up = outerDesign_up;
        innerComposition_up = outerComposition_up = '';
    }

    innerColor_up = selected_inner_color = IsOuterDesignPremiumClassic && !InnerPremiumSetup ? default_inner_color_premium : outerColor_up;

    if (no_sandwich_panel) {
        innerDesign_up = innerComposition_up = '';
        innerColor_up = selected_inner_color = sashColor_up;
    }

    setSashColor();

    setEdgingColor();

    if (IsOuterDesignPremiumClassic) edgingColor_up = default_edging_color_standard;

    setWithRack();

    setRackColor();

    if (!scriptExecCount || IsStringStartedWith(changedFormFieldID, 'Opening_') || IsStringStartedWith(changedFormFieldID, 'Hinge_') || IsLoad)
        setHandle();

    setWithLock();

    no_aluminium_handle = withLock_up && constWithoutHandle.indexOf(withLock_up) > -1 ? true : false;

    setWithAluminiumHandle();

    HandleInfo_up = no_aluminium_handle ? DefaultHandleMessage : (!with_aluminium_handle ? NoHandleMessage : '');
}

// ------------------------------------
//  #S.Extra: ДОПОЛНИТЕЛЬНАЯ ОБРАБОТКА
// ------------------------------------

var ids:Array = new Array('');
if (!changedFormFieldID)
    image = defaultImage;
else if (!IsStringStartedWith(changedFormFieldID, 'Compound_') && (image == defaultImage || !image)) {
    if (IsStringStartedWith(changedFormFieldID, 'Drive') || 
        //IsStringStartedWith(changedFormFieldID, 'Sash') || 
        //IsStringStartedWith(changedFormFieldID, 'Edging') || 
        IsStringStartedWith(changedFormFieldID, 'With') || 
        IsStringStartedWith(changedFormFieldID, 'AdditionalDevices_') || 
        IsStringStartedWith(changedFormFieldID, 'ExpendableMaterials_')
       )
        image = defaultImage;
    else
        image = constSavedImage && constSavedImage != defaultImage && ids.indexOf(changedFormFieldID) == -1 ? constSavedImage : defaultImage;
}

var index:Number = 2;
var ids:Array = new Array('LatticeHeight', 'LatticeStep', 'PicHeight', 'MinPicHeight', 'ArchHeight');

if (imagePath.length >= index) imageVisibility[index] = false;

if (IsStringStartedWith(changedFormFieldID, 'ShieldDesign')
    || IsStringStartedWith(changedFormFieldID, 'ShieldDelivery')
    || IsStringStartedWith(changedFormFieldID, 'ShieldForm')
    || IsStringStartedWith(changedFormFieldID, 'ShieldBody')
    || ids.indexOf(changedFormFieldID) > -1
   ) {
    image = getListSelectedItem(ShieldDesign_List, 0) + '.jpg';

    var x:String = 
        ('DHPR000;DHPR001;DHPR002;DHPR003;DHPR010'.indexOf(selected_shield_article) > -1 ? '01' :
        ('DHPR030;DHPR031;DHPR032;DHPR033'.indexOf(selected_shield_article) > -1 ? '02' :
        ('DHPR050;DHPR051;DHPR052;DHPR053;DHPR070;DHPR071;DHPR072;DHPR073'.indexOf(selected_shield_article) > -1 ? '03' :
        ('DHPR110;DHPR120;DHPR121;DHPR122;DHPR123'.indexOf(selected_shield_article) > -1 ? '04' :
        ('DHPR140;DHPR141;DHPR142;DHPR143;DHPR150;DHPR151;DHPR152;DHPR153'.indexOf(selected_shield_article) > -1 ? '05' :
        ('DHPR160;DHPR161;DHPR162;DHPR163'.indexOf(selected_shield_article) > -1 ? '06' :
        ('DHPR020;DHPR021;DHPR022;DHPR023'.indexOf(selected_shield_article) > -1 ? '07' :
        ('DHPR040;DHPR041;DHPR042;DHPR043;DHPR060;DHPR061;DHPR062;DHPR063'.indexOf(selected_shield_article) > -1 ? '08' :
        ('DHPR100;DHPR101;DHPR102;DHPR103'.indexOf(selected_shield_article) > -1 ? '09' :
        ('DHPR130;DHPR131;DHPR132;DHPR133'.indexOf(selected_shield_article) > -1 ? '10' : ''))))))))));

    if (x)
    {
        imagePath[index] = image_path + 'DHPR-' + x + '.jpg';
        imageX[index] = 20;
        imageY[index] = 320;
        imageVisibility[index] = true;
    }
}

PicHeight_up = objectStatus["PicHeight"] == 1 ? PicHeight : 0;

ArchHeight_up = objectStatus["ArchHeight"] == 1 ? ArchHeight : 0;

// ------------------------------------
//  #S.Validation: КОНТРОЛЬ ПАРАМЕТРОВ
// ------------------------------------

if ((IsForcedValidation || (scriptExecCount > 0 && !IsLoad)) && !validation_disable && !withoutRestriction)
{
    if (SquareWidth < minSquareWidth || SquareWidth > maxSquareWidth)
    {
        helperErrorCode = -3;
        helperErrorMessage = SquareWidthMessage;
    }

    if (SquareHeight < minSquareHeight || SquareHeight > maxSquareHeight)
    {
        helperErrorCode = -3;
        helperErrorMessage = SquareHeightMessage;
    }

    if (SquareClearance < minSquareClearance || SquareClearance > maxSquareClearance)
    {
        helperErrorCode = -3;
        helperErrorMessage = SquareClearanceMessage;
    }

    if (changedFormFieldID == 'LatticeHeight') {
        maxLatticeHeight = Math.floor(SquareHeight / 2);
        if (validation_disable || withoutRestriction)
            is_LatticeHeight_changed = 1;
        else if (LatticeHeight < minLatticeHeight || LatticeHeight > maxLatticeHeight)
        {
            helperErrorCode = -3;
            helperErrorMessage = LatticeHeightMessage.replace('XXX', maxLatticeHeight.toString());
        }
        else
            is_LatticeHeight_changed = 1;
    }

    if (constLatticeStep_120.indexOf(selected_shield_article) > -1) {
        if (changedFormFieldID == 'LatticeStep' && (LatticeStep < minLatticeStep || LatticeStep > maxLatticeStep))
        {
            helperErrorCode = -3;
            helperErrorMessage = LatticeStepMessage;
        }
        else if (!LatticeStep) LatticeStep = 100;
    }

    if (selected_outer_design == 'Panel' && selected_inner_design == 'Panel') {
        helperErrorCode = -3;
        helperErrorMessage = SidePanelMessage;
    }

    blockConstructListItems('OuterDesign_List');

    blockConstructListItems('OuterComposition_List');

    if (IsOuterDesignPremiumClassic && IsEnabled('PremiumDesign_B')) {
        objectStatus["PremiumDesign_B"] = 0;
        if (PremiumDesign_B) {
            PremiumDesign_B = false;
            PremiumDesign_A = true;
        }
    }

    blockConstructListItems('OuterColor_List');
}

// --------------------
//  #S.End: ЗАВЕРШЕНИЕ
// --------------------

constSavedImage = image;

if (IsDebug) {
    NoticeMessage += "DEBUG: country_path [" + country_path + "]<br>" +
                     "DEBUG: countryID [" + countryID + "]<br>" +
                     "DEBUG: regionID [" + regionID + "]<br>" +
                     "DEBUG: helperHostName [" + helperHostName + "]<br>" +
                     "DEBUG: image [" + image + "]<br>"
    ;
}

checkStatusOfProductInfoGroup();

checkStatusOfGateShieldGroup();

checkStatusOfSandwichPanelGroup();

checkStatusOfSashColorGroup();

checkStatusOfPowerRackGroup();

checkStatusOfEquipmentGroup();

checkStatusOfExpendableMaterialsGroup();

checkStatusOfHingedRack();

setLatticeHeight();

checkStatusOfOuterDesign();

if ((['OuterDesign_List', 'OuterComposition_List', 'OuterColor_List'].indexOf(changedFormFieldID) > -1 || IsStringStartedWith(changedFormFieldID, 'OuterColor')) && shield_enabled) {
    if (['Classic', 'Smooth', 'Wave', 'Panel'].indexOf(selected_outer_design) > -1 && !OuterColor_Custom && selected_outer_color)
    {
        image = selected_outer_design + '-' + selected_outer_color + '.jpg';
        IsOuterColorChanged = true;
    }
    else if (['PremiumClassic', 'PremiumHiTech'].indexOf(selected_outer_design) > -1)
        image = (selected_outer_design == 'PremiumClassic' ? 'premium-classic' : 'premium-hi-tech') + '-' +
                (PremiumDesign_A ? 'a' : 
                (PremiumDesign_B ? 'b' : 
                (PremiumDesign_C ? 'c' : 
                'd'))) + '.jpg';
    else
    {
        var x:String = selected_outer_design.toLowerCase();
        image = x.length > 0 ? 'design-' + x + '.jpg' : defaultImage;
    }
}

checkStatusOfOuterComposition();

checkStatusOfOuterComposition();

IsColorImageDisabled = ['Maple', 'Cherry', 'Walnut', 'Brown'].indexOf(selected_outer_color) > -1 ? true : false;

setColorImage(0);

if (['OuterColor_Custom', 'OuterColor_Value'].indexOf(changedFormFieldID) > -1 && IsTrue('OuterColor_Custom')) image = 'ral.jpg';

setColorImage(1);

setCompositionColorImage(2);

checkStatusOfSashColor();

checkStatusOfEdgingColor();

checkStatusOfWithRack();

checkStatusOfRackColor();

checkStatusOfWithLock();

checkStatusOfWithAluminiumHandle();

// ----------------------------
//  #S.Prices: ЦЕНООБРАЗОВАНИЕ
// ----------------------------

if (!prices_disable && helperErrorCode == 0)
{
    // наценка за выбор щита калитки
    if (shield_enabled && selected_shield_code) margins = addMargin(margins, [selected_shield_code, 'NUMBER', 796, 1]);

    if (withRack_up == 'concreted_poles') margins = addMargin(margins, ['00000013156', 'Number', 796, 2]);

    if (withRack_up == 'concreted_rack') margins = addMargin(margins, ['00000114902', 'Number', 796, 1]);

    if (shield_enabled && selected_outer_design == 'Panel') margins = addMargin(margins, ['00000101398', 'NUMBER', 796, 1]);

    if (shield_enabled && IsOuterDesignPremiumClassic) margins = addMargin(margins, ['00000133315', 'NUMBER', 796, 1]);

    if (shield_enabled && IsOuterDesignPremiumCountry) margins = addMargin(margins, ['00000139356', 'NUMBER', 796, 1]);

    if (shield_enabled && IsOuterDesignPremiumHiTech) margins = addMargin(margins, ['00000146749', 'NUMBER', 796, 1]);

    if (shield_enabled && OuterColorNonStandard) margins = addMargin(margins, ['00000015628', 'NUMBER', 796, 1]);

    if (shield_enabled && OuterColor_Custom && parseInt(OuterColor_Value) > 0) margins = addMargin(margins, ['00000011685', 'NUMBER', 55, square_aperture]);

    var lst:Array = new Array(
      'Alder-Ольха              :00000138171', 
      'Beech-Бук                :00000138173', 
      'ForestWalnut-Лесной орех :00000138174', 
      'Mahagony-Махагон         :00000138175', 
      'Wenge-Венге              :00000138176',
      'GoldenOak-Золотой дуб    :00000124963',
      'GreenOak-Зелёный дуб     :00000124964'
    );
    if (shield_enabled && OuterColorWood) addColorMargins(OuterColor_List, lst, 0);

    var colors:Array = new Array('Maple', 'Cherry', 'Walnut');
    if (shield_enabled && OuterColorWood && checkColorListMatched(OuterColor_List, colors, 0)) margins = addMargin(margins, ['00000104641', 'NUMBER', 796, 1]);

    if (shield_enabled && (IsOuterDesignPremiumClassic || IsOuterDesignPremiumCountry || IsOuterDesignPremiumHiTech) && selected_outer_composition == 'Wood') margins = addMargin(margins, ['00000133315', 'NUMBER', 796, 1]);

    var colors:Array = new Array('зебра', 'Zebra');
    if (shield_enabled && checkColorListMatched(OuterColor_List, colors, 0)) margins = addMargin(margins, ['00000144294', 'NUMBER', 796, 1]);

    if (shield_enabled && IsOuterDesignPremiumClassic && InnerPremiumSetup) margins = addMargin(margins, ['00000133315', 'NUMBER', 796, 1]);

    if (shield_enabled && IsOuterDesignPremiumHiTech && InnerPremiumSetup) margins = addMargin(margins, ['00000146749', 'NUMBER', 796, 1]);

    if (IsTrue('SashColorNonStandard')) margins = addMargin(margins, ['00000015628', 'NUMBER', 796, 1]);

    if (with_lock && selected_lock_code) margins = addExtraMargin(margins, [selected_lock_code, 'STRING', 796, 1]);

    if (with_aluminium_handle && selected_aluminium_handle_code) margins = addExtraMargin(margins, [selected_aluminium_handle_code, 'STRING', 796, 1]);

    if (IsDeepDebug) {
        NoticeMessage += "DEEPDEBUG: construct:<br>";
        NoticeMessage += "==> construct_default [" + construct_default + "]<br>";
        NoticeMessage += "==> defaultConstruct [" + defaultConstruct + "]<br>";
        NoticeMessage += "==> defaultConstructCount [" + defaultConstructCount + "]<br>";
    
        var lst:Array = getList(margins);
        if (lst.length) {
            NoticeMessage += "DEEPDEBUG: margins:<br>";
            for (var i:int=0; i<lst.length; i++) {
                NoticeMessage += "==> [" + lst[i] + "]<br>";
            }
        }
    }
}

// -----------------------
//  #S.Trace: ТРАССИРОВКА
// -----------------------

var IsTrace:Boolean = new Boolean(false);

if (IsTrace) {
    NoticeMessage = 
        "***<br>" +
    NoticeMessage;
}



//
//  =================
//

if (IsDeepDebug) {
    NoticeMessage += 
        "DEEPDEBUG: total images:" + imagePath.length + "<br>" +
        "DEEPDEBUG: imagePath:" + "<br>";
    for (var i=0; i<imagePath.length; i++) {
        NoticeMessage += "==> [" + imagePath[i] + "]<br>";
    }
    NoticeMessage += 
        "DEEPDEBUG: imageVisibility:" + imageVisibility.toString() + "<br>" +
        "DEEPDEBUG: imageX:" + imageX.toString() + "<br>" +
        "DEEPDEBUG: imageY:" + imageY.toString() + "<br>";
}

setImageURI = common_image ? 'images/' + common_image + '/' + image : country_path + default_image + image;

if (IsDeepDebug) {
    NoticeMessage += 
        "DEEPDEBUG: setImageURI:" + setImageURI + "<br>";
}

if (IsDeepDebug) NoticeMessage += "DEEPDEBUG: constSavedImage [" + constSavedImage + "]<br>";

}

if (prices_disable) attentionMessage = getSystemOption('prices_disable', currentLocale) + attentionMessage;
if (validation_disable) attentionMessage = getSystemOption('validation_disable', currentLocale) + attentionMessage;
if (isWorkWithout1C) attentionMessage = getSystemOption('isWorkWithout1C', currentLocale) + attentionMessage;
if (withoutRestriction) attentionMessage = getSystemOption('withoutRestriction', currentLocale) + attentionMessage;
if (IsDebug || IsDeepDebug) attentionMessage = getSystemOption('Debug', currentLocale) + attentionMessage;

++scriptExecCount;

NoticeMessage += (NoticeMessage ? '<br>' : '') + '* * * <br>Generated by Helpgen.py, version 2.44 beta © <br>Product Release 1.30 42186.0<br>Date: 2015-07-01 11:56'
