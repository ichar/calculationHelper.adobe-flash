// SectionalDoorsDUS480
// --------------------
// Generated by Helpgen.py, version 2.44 beta © 
// Date: 2015-06-25 01:03

wizardID = 'SectionalDoorsDUS480';

var IsDebug:Boolean = new Boolean(false);
var IsDeepDebug:Boolean = new Boolean(false);
var IsLoad:Boolean = new Boolean(false);
var IsForcedValidation:Boolean = new Boolean(false);

var validation_disable:Boolean = new Boolean(false);
var prices_disable:Boolean = new Boolean(false);

if (!(IsExist('helperReset') && helperReset)) 
{

// ------------------------------------
//  #S.Globals: ГЛОБАЛЬНЫЕ ОПРЕДЕЛЕНИЯ
// ------------------------------------

var country_path:String = '';
var now:Date = new Date();

isWorkWithout1C = false;

var common_image:String = '';
var image:String = 'default.jpg';

NoticeMessage = "";

var country:String = countryID ? countryID.toUpperCase() : '';
country_path = ''; // currentLocale.toLowerCase();

var string_delimeter:String = 'x';

//countryID = 'UA';
//regionID = '000000002';

image = 'default.jpg';
var defaultImage:String = image;

IsForcedValidation = true;

if (IsExist('helperProductControl')) helperProductControl.enabled = true;

var shield_enabled:Number = 1;
var slide_rails_enabled:Number = 1;

var no_sandwich_panel:Boolean = false;
var no_window:Boolean = false;
var no_door:Boolean = false;

var WithPanoramicPanel:Boolean = false;

var WithDriveModelPower:Boolean = IsExist('DriveModelPowerStandard');
var WithDriveModelManual:Boolean = IsExist('DriveModelManualStandard');

function setShieldOnly() {
    var ids:Array = [
        'DriveFutureSetup',
        'DriveSetup',
        'ControlDevices_Default'
    ];
    setStatus(ids, 0);
}

function setSlideRailsOnly() {
    no_sandwich_panel = no_window = no_door = true;
    var ids:Array = [
        'WithLock',
        'WithAnotherHandle',
        'DoorSetup',
        'DriveFutureSetup',
        'DriveSetup',
        'ControlDevices_Default'
    ];
    setStatus(ids, 0);
}

var max_square_height:Number = 0;
var max_square_width:Number = 0;

function checkSquareHeightWidth(max_square_height:Number, max_square_width:Number) {
    if (SquareWidth > max_square_width && SquareHeight > max_square_height)
    {
        helperErrorCode = -3;
        helperErrorMessage = ExtraSquareHeightMessage
            .replace('BBB', max_square_width.toString())
            .replace('HHH', max_square_height.toString());
    }
}

blockConstructSquare();

var max_square_depth:Number = 0;

function checkSquareDepth(max_square_depth:Number, msg:String) {
    if (validation_disable || withoutRestriction)
        return;
    if (SquareDepth <= max_square_depth) {
        helperErrorCode = -3;
        helperErrorMessage = ExtraSquareDepthMessage
            .replace('XXX', msg)
            .replace('LLL', max_square_depth.toString())
    }
}

objectStatus["SquareDepthGroupTitle_1"] = 1;

var min_square_depth:Number = 0;

function setWallMaterial() {
    var x:Array = getListSelectedValue(WallMaterial_List);
    wallMaterial_up = x[0];
}

function setCeilingMaterial() {
    var x:Array = getListSelectedValue(CeilingMaterial_List);
    ceilingMaterial_up = x[0];
}

function setLintelMaterial() {
    var x:Array = getListSelectedValue(LintelMaterial_List);
    lintelMaterial_up = x[0];
}

function checkStatusOfLiftingType() {
    var ids:Array = new Array();
    if (Platband_Size < 350)
        ids.push('LiftingType_Default');
    if (Platband_Size < 150)
        ids.push('LiftingType_LowRollBack');
    if (Platband_Size < 600 || Platband_Size >= 4165)
        ids.push('LiftingType_High');
    if (Platband_Size < SquareHeight+700)
        ids.push('LiftingType_Vertical');
    if (Platband_Size < 500)
        ids.push('LiftingType_Downward');
    if (Platband_Size < 600)
        ids.push('LiftingType_HighDownward');
    if (Platband_Size < 1600 || LeftSideWidth <= 500 || RightSideWidth <= 500)
        ids.push('LiftingType_HighRollBottom');
    if (Platband_Size < 1600 || LeftSideWidth <= 500 || RightSideWidth <= 500)
        ids.push('LiftingType_HighDownwardRollBottom');
    if (Platband_Size < SquareHeight+370 || LeftSideWidth < 500 || RightSideWidth < 500)
        ids.push('LiftingType_VerticalRollBottom');
    if (!(Platband_Size >= 190 && Platband_Size <= 600 && SquareHeight <= 3000) &&
        !(Platband_Size >= 230 && Platband_Size <= 600 && SquareHeight > 3000) &&
        !(square_aperture > 16))
        ids.push('LiftingType_LowRollFront');
    if (square_aperture > 16) {
        ids.push('LiftingType_LowRollFront');
        ids.push('LiftingType_LowRollBack');
    }
    setStatus(ids, 0);
}

function checkStatusOfSlopeAngle() {
    objectStatus["SlopeAngle"] = IsTrue('LiftingType_Downward') || IsTrue('LiftingType_LowDownwardRollBack') || IsTrue('LiftingType_HighDownward') || IsTrue('LiftingType_HighDownwardRollBottom') ? 1 : 0;
}

function optimizeLifting() {
    var lifting_type:String = '';
    LiftingType_Default = LiftingType_LowRollFront = LiftingType_LowRollBack = LiftingType_High = LiftingType_Vertical = LiftingType_Downward = LiftingType_LowDownwardRollBack = LiftingType_HighDownward = false;

    if (Platband_Size >= 500 && Platband_Size < 4165 && SlopeAngle > 0 && SlopeAngle <= 65 && SlopeAngle != 45 && square_aperture < 15 && SquareDepth >= min_square_depth) {
        LiftingType_HighDownward = true;
        IsOptimizeLifting = true;
        lifting_type = 'HighDownward';
    } else
    if (Platband_Size >= 150 && Platband_Size < 1500 && SlopeAngle > 0 && SlopeAngle <= 65 && SlopeAngle != 45 && square_aperture < 15 && SquareDepth >= min_square_depth) {
        LiftingType_LowDownwardRollBack = true;
        IsOptimizeLifting = true;
        lifting_type = 'LowDownwardRollBack';
    } else
    if (Platband_Size >= 500 && Platband_Size < 1500 && SlopeAngle > 0 && SlopeAngle <= 65 && SlopeAngle != 45 && SquareDepth >= 270) {
        LiftingType_Downward = true;
        IsOptimizeLifting = true;
        lifting_type = 'Downward';
    } else
    if (Platband_Size >= 150 && Platband_Size < 350 && square_aperture <= 15 && SquareDepth >= min_square_depth) {
        LiftingType_LowRollBack = true;
        IsOptimizeLifting = true;
        lifting_type = 'LowRollBack';
    } else
    if (SquareHeight > 2600 && SquareWidth > 3000 && Platband_Size >= 230 && Platband_Size < 350 && SquareDepth >= min_square_depth) {
        LiftingType_LowRollFront = true;
        IsOptimizeLifting = true;
        lifting_type = 'LowRollFront';
    } else
    if (SquareHeight <= 2600 && SquareWidth <= 3000 && Platband_Size >= 160 && Platband_Size < 350 && SquareDepth >= min_square_depth) {
        LiftingType_LowRollFront = true;
        IsOptimizeLifting = true;
        lifting_type = 'LowRollFront';
    } else
    if (Platband_Size >= SquareHeight + 580 && SquareDepth >= 270) {
        LiftingType_Vertical = true;
        IsOptimizeLifting = true;
        lifting_type = 'Vertical';
    } else
    if (Platband_Size >= 600 && Platband_Size < 4165 && SquareDepth >= 270) {
        LiftingType_High = true;
        IsOptimizeLifting = true;
        lifting_type = 'High';
    } else
    if (SquareHeight > 3700 && Platband_Size >= 550 && Platband_Size < 1800 && square_aperture < 15 && SquareDepth >= min_square_depth) {
        LiftingType_Default = true;
        IsOptimizeLifting = true;
        lifting_type = 'Default';
    } else
    if (SquareHeight < 3700 && SquareWidth <= SquareHeight && Platband_Size >= 410 && Platband_Size < 550 && square_aperture < 15 && SquareDepth >= min_square_depth) {
        LiftingType_Default = true;
        IsOptimizeLifting = true;
        lifting_type = 'Default';
    } else
    if (SquareHeight < 3700 && SquareWidth > SquareHeight && Platband_Size >= 350 && Platband_Size < 410 && square_aperture < 15 && SquareDepth >= min_square_depth) {
        LiftingType_Default = true;
        IsOptimizeLifting = true;
        lifting_type = 'Default';
    } else {
        LiftingType_Default = true;
    }

    if (IsDeepDebug)
        NoticeMessage += "DEEPDEBUG: lifting_type [" + lifting_type + "]<br>";
}

function isSlopeAngleValid(status:Boolean):Boolean {
    if (status && !objectStatus["SlopeAngle"])
        return false;
    return objectStatus["SlopeAngle"] && SlopeAngle > maxSlopeAngle ? false : true;
}

function isSlopeAngle_5():Boolean {
    return SlopeAngle%5 == 0 ? true : false;
}

objectStatus["ProductInfoGroupTitle_1"] = 0;

var selected_outer_design:String = '';
var selected_outer_composition:String = '';
var selected_outer_color:String = '';

var outer_composition_valid:Boolean = true;

var IsOuterDesignSmooth:Boolean = false;
var IsOuterDesignPanel:Boolean = false;
var IsOuterDesignWideBand:Boolean = false;
var IsOuterDesignPremium:Boolean = false;
var IsOuterDesignPremiumClassic:Boolean = false;
var IsOuterDesignPremiumCountry:Boolean = false;
var IsOuterDesignPremiumHiTech:Boolean = false;

var selected_inner_design:String = '';
var selected_inner_composition:String = '';

var inner_composition_valid:Boolean = true;

var IsInnerDesignPanel:Boolean = false;

function checkStatusOfOuterDesign() {
    objectStatus["OuterDesign_List"] = no_sandwich_panel ? 0 : 1;
}

function setOuterDesign() {
    selected_outer_design = getListSelectedItem(OuterDesign_List, 0);
    outerDesign_up = getListValidName(OuterDesign_List, selected_outer_design);

    IsOuterDesignSmooth = selected_outer_design == 'Smooth' ? true : false;
    IsOuterDesignPanel = selected_outer_design == 'Panel' ? true : false;
    IsOuterDesignWideBand = selected_outer_design == 'WideBand' ? true : false;
    IsOuterDesignPremium = IsStringStartedWith(selected_outer_design, 'Premium') ? true : false;
    IsOuterDesignPremiumClassic = selected_outer_design == 'PremiumClassic' ? true : false;
    IsOuterDesignPremiumCountry = selected_outer_design == 'PremiumCountry' ? true : false;
    IsOuterDesignPremiumHiTech = selected_outer_design == 'PremiumHiTech' ? true : false;
}

objectStatus["ShieldOuterDesignTitle_1"] = default_title_enable;

var IsOuterColorChanged:Boolean = false;
var IsColorImageHidden:Boolean = OuterColor_Custom ? true : false;

function setImageDefault() {
    var x:String = selected_outer_design.toLowerCase();
    common_image = !IsOuterDesignPremium ? 'design' : '';
    image = x.length > 0 ? 'design-' + x + '.jpg' : defaultImage;
}

function setImageOfPremium() {
    if (IsOuterDesignPremiumClassic) {
        image = 'premium-classic-' + selected_outer_color + '-' + (PremiumDesign_A ? 'a' : 'b') + '.jpg';
    }
    else if (IsOuterDesignPremiumCountry) {
        image = 'premium-country-' + selected_outer_color + '-' + (PremiumDesign_A ? 'a' : 'b') + '.jpg';
    }
    else if (IsOuterDesignPremiumHiTech) {
        image = 'premium-hi-tech-';
        if (IsTrue('OuterColorStandard'))
            image += selected_outer_color + '-';
        if (PremiumDesign_A)
            image += 'a';
        else if (PremiumDesign_B)
            image += 'b';
        else if (PremiumDesign_C)
            image += 'c';
        else if (PremiumDesign_D)
            image += 'd';
        image += '.jpg';
    } 
    else
        setImageDefault();
}

function checkStatusOfOuterComposition() {
    if (IsOuterDesignPremium) {
        objectStatus["OuterComposition_List"] = 0;
        outer_composition_valid = false;
    } else {
        objectStatus["OuterComposition_List"] = no_sandwich_panel ? 0 : shield_enabled;
        outer_composition_valid = true;
    }

    if (!objectStatus["OuterComposition_List"] && selected_outer_composition) {
        outerComposition_up = '';
    }
}

function setOuterComposition() {
    if (getListLength(OuterComposition_List)) {
        selected_outer_composition = getListSelectedItem(OuterComposition_List, 0);
        outerComposition_up = getListValidName(OuterComposition_List, selected_outer_composition);
    }
}

function initOuterColor() {
    if (IsOuterDesignPremiumClassic || IsOuterDesignPremiumCountry) {
        OuterColorNonStandard = OuterColorWood = OuterColor_Custom = false;
        OuterColorStandard = true;
    }

    var source:String = '';
    var default_color:String = '';

    if (OuterColorStandard) {
        if (IsOuterDesignPremiumClassic || IsOuterDesignPremiumCountry) {
            source = listOuterColorPremium;
            default_color = default_outer_color_premium;
        } else {
            source = listOuterColorStandard;
            default_color = default_outer_color_standard;
        }
    }
    else if (OuterColorNonStandard) {
        source = listOuterColorNonStandard;
        default_color = default_outer_color_nonstandard;
    }
    else if (OuterColorWood) {
        source = listOuterColorWood;
        default_color = default_outer_color_wood;
    }
    else if (OuterColor_Custom) {
        OuterColor_Value = default_outer_color_custom ? parseInt(default_outer_color_custom) : 0;
    }

    if (source)
        OuterColor_List = blockItems('OuterColor_List', [], source);
    if (default_color)
        OuterColor_List = setListSelectedIndexById(OuterColor_List, default_color);
}

function checkStatusOfOuterColor() {
    var premium_enabled:Boolean = (IsOuterDesignPremiumClassic || IsOuterDesignPremiumCountry) ? true : false;
    var enable_by_default:Number = shield_enabled && !no_sandwich_panel ? 1 : 0;

    objectStatus["OuterColorStandard"] = enable_by_default;
    objectStatus["OuterColorNonStandard"] = objectStatus["OuterColorWood"] = premium_enabled ? 0 : enable_by_default;
    if (premium_enabled && (OuterColorNonStandard || OuterColorWood)) {
        OuterColorNonStandard = OuterColorWood = false;
        OuterColorStandard = true;
    }

    objectStatus["OuterColor_Custom"] = IsOuterDesignPremium ? 0 : enable_by_default;

    objectStatus["OuterColor_List"] = !OuterColor_Custom ? enable_by_default : 0;
    objectStatus["OuterColor_Value"] = OuterColor_Custom ? enable_by_default : 0;
}

function setOuterColor() {
    if (no_sandwich_panel)
        outerColor_up = selected_outer_color = '';
    else if (OuterColor_Custom)
        outerColor_up = selected_outer_color = makeRAL(OuterColor_Value);
    else
        outerColor_up = selected_outer_color = getListSelectedItem(OuterColor_List, 0);
}

var IsColorImageDisabled:Boolean = false;

var image_path:String = 'images/design/';

function removeColorImage(index:Number)
{
    if (imagePath.length > index) {
        imageVisibility[index] = false;
    }
}

function addImage(index:Number)
{
    if (imagePath.length < index + 1)
    {
        imagePath.push('');
        imageVisibility.push(false);
        imageX.push(0);
        imageY.push(0);
    }
}

function setColorImage(index:Number)
{
    if (IsColorImageDisabled) {
        common_image = '';        
        return;
    }

    if (!IsOuterColorChanged || IsColorImageHidden)
    {
        removeColorImage(index);
        return;
    }

    addImage(index);

    var p:String = new String('');
    var v:String = new String('');

    if (index == 0) {
        p = 'outer';
        v = selected_outer_color;
        imageX[index] = 0;
        imageY[index] = 310;
    } else {
        p = 'inner';
        v = selected_inner_color;
        imageX[index] = 230;
        imageY[index] = 310;
    }

    imagePath[index] = image_path + p + '-color-' + v + '.jpg';
    imageVisibility[index] = true;
}

function setCompositionColorImage(index:Number)
{
    if (IsColorImageDisabled) {
        initDefaultImage();
        image = defaultImage;
        return;
    }

    if (!IsOuterColorChanged || IsColorImageHidden || !selected_outer_composition)
    {
        removeColorImage(index);
        return;
    }

    addImage(index);

    var v:String = selected_outer_composition.toLowerCase();

    imageX[index] = 0;
    imageY[index] = 450;
    imagePath[index] = image_path + 'composition-' + v + '-small.png';
    imageVisibility[index] = true;
}

function checkStatusOfDoor() {
    objectStatus["DoorType_V2"] = 
    objectStatus["DoorType_V3"] = 
    objectStatus["DoorType_V4"] = 
    objectStatus["DoorType_V5"] = 
    DoorSetup ? shield_enabled : 0;

    objectStatus["DoorSideGroupTitle_1"] = 
    objectStatus["DoorSideHeight"] = 
    objectStatus["DoorSideWidth"] = 
    objectStatus["DoorPosition_Left"] = 
    objectStatus["DoorPosition_Center"] = 
    objectStatus["DoorPosition_Right"] = 
    objectStatus["DoorPosition_Distance"] = 
    objectStatus["DoorPosition_Value"] = 
    objectStatus["Hinge_Left"] = 
    objectStatus["Hinge_Right"] = 
    DoorSetup ? shield_enabled : 0;
}

objectStatus["DoorSideGroupTitle_2"] = 0;

function setImageOfDoorPosition() {
    var x:Array = changedFormFieldID.split('_');
    if (x.length > 0) image = 'door-' + x[1].toLowerCase() + '.jpg';
}

function setImageOfHingePosition() {
    var x:Array = changedFormFieldID.split('_');
    if (x.length > 0) image = 'hinge-' + x[1].toLowerCase() + '.jpg';
}

objectStatus["DoorSideGroupTitle_3"] = 0;

var sash_enabled:Number = DoorSetup ? 1 : 0;

function initDoorSashColor(options:Array) {
    DoorSashColor_List = blockItems('DoorSashColor_List', options, listDoorSashColorStandard);
}

function checkStatusOfDoorSashColor() {
    setStatusByKey('DoorSashColor', sash_enabled);
    objectStatus["DoorSashColor_Value"] = IsFalse('DoorSashColor_BySample') ? 0 : sash_enabled;
}

function setDoorSashColor() {
    if (!sash_enabled) {
        doorSashColor_up = DoorSetup && DoorType_V3 ? default_door_sash_color : '';
    }
    else if (DoorSashColorStandard)
        doorSashColor_up = getListSelectedItem(DoorSashColor_List, 0);
    else
        doorSashColor_up = makeRAL(DoorSashColor_Value);

    if (IsDebug)
        NoticeMessage += "DEBUG: doorSashColor_up [" + doorSashColor_up + "]<br>";
}

var with_lock:Boolean = false;
var selected_lock_code:String = '';

function checkStatusOfWithLock() {
    objectStatus["WithLockTitle_1"] = 
    objectStatus["WithLock_List"] = 
    shield_enabled ? 1 : 0;
}

function setWithLock() {
    withLock_up = selected_lock_code = '';
    var x:Array = getListSelectedValue(WithLock_List);
    if (x && x.length > 2) {
        withLock_up = x[0];
        selected_lock_code = x[2];
    }
    with_lock = withLock_up && withLock_up != 'no' ? true : false;
}

var with_handle:Boolean = false;
var selected_handle_code:String = '';

function checkStatusOfWithHandle() {
    objectStatus["WithHandleTitle_1"] = 
    objectStatus["WithHandle_List"] = 
    shield_enabled ? 1 : 0;
}

function setWithHandle() {
    withHandle_up = selected_handle_code = '';
    var x:Array = getListSelectedValue(WithHandle_List);
    if (x && x.length > 2) {
        withHandle_up = x[0];
        selected_handle_code = x[2];
    }
    with_handle = withHandle_up && withHandle_up != 'no' ? true : false;
}

function checkStatusOfWindows() {
    var ids:Array = [
        'Window_White_Count',
        'Window_WhiteCross_Count',
        'Window_WhiteDiamond_Count',
        'Window_Black_Count',
        'Window_BlackCross_Count',
        'Window_BlackDiamond_Count',
        'Window_Brown_Count',
        'Window_BrownCross_Count',
        'Window_BrownDiamond_Count',
        'Window_Ring635_Count',
        'Window_Ring607_Count',
        'Window_RingSilver_Count',
        'WindowNote'
    ];
    setObjectStatus(ids, 1);

    if (!shield_enabled || no_window)
        return;
    /*
    if (IsOuterDesignPanel) {
        ids = [
        'Window_White_Count',
        'Window_WhiteCross_Count',
        'Window_WhiteDiamond_Count',
        'Window_Black_Count',
        'Window_BlackCross_Count',
        'Window_BlackDiamond_Count',
        'Window_Brown_Count',
        'Window_BrownCross_Count',
        'Window_BrownDiamond_Count'
        ];
    } else if (IsOuterDesignPremiumClassic || IsOuterDesignPremiumHiTech) {
        ids = [
        'Window_White_Count',
        'Window_WhiteCross_Count',
        'Window_WhiteDiamond_Count',
        'Window_Brown_Count',
        'Window_BrownCross_Count',
        'Window_BrownDiamond_Count',
        'Window_Golden_Count',
        'Window_GoldenCross_Count',
        'Window_GoldenDiamond_Count'
        ];
    } else {
        ids = [
        'Window_White_Count',
        'Window_WhiteCross_Count',
        'Window_WhiteDiamond_Count',
        'Window_Black_Count',
        'Window_BlackCross_Count',
        'Window_BlackDiamond_Count',
        'Window_Brown_Count',
        'Window_BrownCross_Count',
        'Window_BrownDiamond_Count',
        'Window_Ring635_Count',
        'Window_Ring607_Count',
        'Window_RingSilver_Count'
        ];
    }
    ids.push('WindowNote');
    setObjectStatus(ids, 1);
    */
}

var IsDriveModel:Boolean = false;
var IsDriveModelPower:Boolean = false;

function checkStatusOfDriveGroup() {
    var s:Number = IsTrue('DriveSetup') ? 1 : 0;
    var ids:Array = [
        'PowerDriveSetupFuture'
    ];
    setStatus(ids, s);
    setStatusByKey('ControlDevicesGroup_', s);

    var s:Number = IsTrue('DriveSetup') && IsFalse('PowerDriveSetupFuture') ? 1 : 0;
    var ids:Array = new Array(
        'DriveModelPowerStandard',
        'DriveModelManualStandard'
    );
    if (objectStatus["DriveModelOverheadStandard"]) ids.push('DriveModelOverheadStandard');
    setStatus(ids, s);

    IsDriveModel = IsTrue('DriveModelOverheadStandard') && getListSelectedIndex(DriveModelOverheadStandard_List) == 0 ? true : false;

    var s:Number = IsTrue('DriveModelOverheadStandard') ? 1 : 0;
    var ids:Array = [
        'DriveModelOverheadStandard_List',
        'DriveModelGroupTitle_1',
        'BoardControl'
    ];
    setStatus(ids, s);
    var s:Number = IsDriveModel ? 1 : 0;
    setStatusByKey('DriveModelXOverhead_', s);
    var ids:Array = [
        'DriveModelGroupTitle_2',
        'OverheadDeviceGroupTitle_1', 
        'OverheadDevice_List'
    ];
    setStatus(ids, s);

    if (WithDriveModelPower) {
        IsDriveModelPower = IsTrue('DriveModelPowerStandard') && getListSelectedIndex(DriveModelPowerStandard_List) == 0 ? true : false;

        var s:Number = IsTrue('DriveModelPowerStandard') ? 1 : 0;
        var ids:Array = [
            'DriveModelPowerStandard_List',
            'DriveModelPowerGroupTitle_1',
            'IndustrialSectionalGatesGroupTitle_1'
        ];
        setStatus(ids, s);
        setStatusByKey('IndustrialSectionalGates_', s);
        var s:Number = IsDriveModelPower ? 1 : 0;
        setStatusByKey('DriveModelXPower_', s);
        var ids:Array = [
            'DriveModelPowerGroupTitle_2'
        ];
        setStatus(ids, s);
    }

    var s:Number = IsTrue('DriveModelPowerStandard') || IsTrue('DriveModelManualStandard') || IsTrue('PowerDriveSetupFuture') ? 1 : 0;
    setStatusByKey('PowerDriveSide_', s);
    var ids:Array = [
        'PowerDriveSideGroupTitle_1'
    ];
    setStatus(ids, s);

    if (WithDriveModelManual) {
        var s:Number = IsTrue('DriveModelManualStandard') ? 1 : 0;
        setStatusByKey('DriveModelXManual_', s);
    }
}

var selected_drive_model:String = '';
var selected_drive_article:String = '';
var selected_drive_code:String = '';

function setSelectedDriveModel() {
    var item:String = '';
    var x:String = '';

    for(x in self) {
        if (IsStringStartedWith(x, 'DriveModelX') && IsTrue(x)) {
            item = x;
            break;
        }
    }

    if (item) {
        var x:Array = item.split('_');
        selected_drive_model = x.length > 1 ? x[1] : '';
    } else if (DriveModelOverheadStandard) {
        var x:Array = getListSelectedValue(DriveModelOverheadStandard_List);
        selected_drive_model = x && x.length ? x[0] : '';
    } else if (DriveModelPowerStandard) {
        var x:Array = getListSelectedValue(DriveModelPowerStandard_List);
        selected_drive_model = x && x.length ? x[0] : '';
    }

    if (IsDeepDebug)
        NoticeMessage += "DEEPDEBUG: selected_drive_model [" + selected_drive_model + "]<br>";
}

function setDriveModel() {
    DriveModel_Code = DriveModelPower_Code = DriveModelManual_Code = word_not_defined;
    DriveModel_up = DriveModelPower_up = DriveModelManual_up = '';

    if (IsFalse('DriveSetup'))
        return;

    var item:Array = getListItemById(listDriveModel, selected_drive_model);
    if (item && item.length > 2) {
        if (item[0].indexOf(':') > 0)
            selected_drive_article = get_compound_article(item[0]);
        selected_drive_code = item[2];
    }

    if (DriveModelOverheadStandard) {
        DriveModel_up = selected_drive_article;
        DriveModel_Code = selected_drive_code;
    } else if (DriveModelPowerStandard) {
        DriveModelPower_up = selected_drive_article;
        DriveModelPower_Code = selected_drive_code;
    } else if (DriveModelManualStandard) {
        DriveModelManual_up = selected_drive_article;
        DriveModelManual_Code = selected_drive_code;
    }
}

objectStatus["PowerDriveSetupGroupTitle_3"] = 0;

function checkStatusOfDriveModel() {}

var selected_overhead_device_code:String = '';

function setOverheadDevice() {
    OverheadDevice_up = selected_overhead_device_code = '';
    if (!IsDriveModel)
        return;
    var x:Array = getListSelectedValue(OverheadDevice_List);
    if (x && x.length > 2 && x[0] != 'no') {
        OverheadDevice_up = get_compound_article(x[0]);
        selected_overhead_device_code = x[2];
    }
}

var IsPowerDriveType_Overhead:Boolean = false;

function checkStatusOfDriveModelPower() {
    IsPowerDriveType_Overhead = IsTrue('DriveModelPower_DIY500KIT') ? false : (DriveSetup ? true : false);
}

function checkStatusOfDriveModelPower() {}

function checkStatusOfDriveModelManual() {}

var drive_extrachain_length:Number = 0;
function checkStatusOfDriveExtraChain() {
    var s:Number = drive_extrachain_length && (IsTrue('DriveModelPowerStandard') || IsTrue('DriveModelManualStandard')) ? 1 : 0;
    var ids:Array = [
        'DriveExtraChain'
        //'DriveExtraChain_Length'
    ];
    setStatus(ids, s);
}

function setDriveExtraChain(p:Number) {
    if (p > 0) { // && IsTrue('DriveExtraChain')
        drive_extrachain_length = (((SquareHeight + Platband_Size) * 2) - p) / 1000;
        drive_extrachain_length = drive_extrachain_length < 0 ? 0 : Math.ceil(drive_extrachain_length);
    }
    /*
    if (drive_extrachain_length == 0 && !IsLoad) {
        DriveExtraChain = false;
        objectStatus["DriveExtraChain"] = 0;
        attentionMessage = DriveExtraChainErrorMessage + '\n';
    }
    */

    if (IsDeepDebug)
        NoticeMessage += "DEEPDEBUG: drive_extrachain_length [" + drive_extrachain_length + "]<br>";
}

objectStatus["DriveExtraChainGroupTitle_1"] = 0;
var p_extrachain:Number = 0;

function checkStatusOfAdditionalDevices2460110() {}

function setAdditionalDevices2460110() {
    AdditionalDevices2460110_up = '';
    var x:Array = getListSelectedValue(AdditionalDevices2460110_List);
    if (x && x.length > 1 && x[0] != 'no') {
        AdditionalDevices2460110_up = x[0];
    }
}

var pipe_enabled:Number = 0;

function checkStatusOfEdgingPipeColor() {
    pipe_enabled = 1;
    objectStatus["EdgingPipeColorStandard"] = objectStatus["EdgingPipeColorStandard_List"] = pipe_enabled;
    objectStatus["EdgingPipeColor_Value"] = EdgingPipeColorStandard ? 0 : pipe_enabled;
}

function setEdgingPipeColor() {
    if (!pipe_enabled) {
        edgingPipeColor_up = '';
    }
    else if (EdgingPipeColorStandard)
        edgingPipeColor_up = getListSelectedItem(EdgingPipeColorStandard_List, 0);
    else
        edgingPipeColor_up = EdgingPipeColor_Value.toString();
    if (edgingPipeColor_up == 'no')
        edgingPipeColor_up = '';
    if (IsDebug)
        NoticeMessage += "DEBUG: edgingPipeColor_up [" + edgingPipeColor_up + "]<br>";
}

var with_door_product:String = '00000129395';

function checkColorListMatched(outer:String, colors:Array, index:int): Boolean
{
    var selected_index:int = getListSelectedIndex(outer);
    var item:Array = getListItem(outer, selected_index);
    if (!item || item.length < 1) return false;

    var name:String = item[0];          // наименование цвета

    var color:Array = name.split(' ');
    if (color.length < index+1) return false;

    var code:String = color[index];     // код цвета
    if (!code) return false;

    return colors.indexOf(code) == -1 ? false : true;
}

function addColorMargins(outer:String, lst:Array, index:int)
{
    for (var i:int=0; i < lst.length; i++) {
        var x:Array = lst[i].split(':');
        if (x.length > 1) {
            var colors:Array = strip(x[0]).split('-');
            var margin:String = strip(x[1]);
            if (colors.length > 0 && margin && checkColorListMatched(outer, colors, index))
            {
                margins = addMargin(margins, [margin, 'NUMBER', 796, 1]);
            }
        }
    }
}

//
//  ========================================================================
//

if (IsDebug) NoticeMessage += "DEBUG: scriptExecCount [" + scriptExecCount + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: changedFormFieldID [" + changedFormFieldID + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: isConfirmation [" + isConfirmation + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: confirmCode [" + confirmCode + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: withoutRestriction [" + withoutRestriction + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: currentLocale [" + currentLocale + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: defaultProduct [" + defaultProduct + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: priceTypeID [" + priceTypeID + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: helperVersion [" + helperVersion + "]<br>";
if (IsDebug) NoticeMessage += "DEBUG: wizardID [" + wizardID + "]<br>";

// -------------------------------------------------
//  #S.Init: ИНИЦИАЛИЗАЦИЯ (ПАРАМЕТРЫ ПО УМОЛЧАНИЮ)
// -------------------------------------------------

if (!scriptExecCount)
{
    scriptExecCount = 0;

    //if (IsExist('showOnStartup')) showOnStartup = 'none'; //GarageInfoGroup

    SquareWidth = default_width;

    SquareHeight = default_height;

    Platband_Size = default_platband;

    LeftSideWidth = default_leftside_width;

    RightSideWidth = default_rightside_width;

    SquareDepth = default_depth;

    WallMaterial_List = listTypeOfMaterial;
    if (default_wall_material)
        WallMaterial_List = setListSelectedIndexById(WallMaterial_List, default_wall_material);

    CeilingMaterial_List = listTypeOfMaterial;
    if (default_ceiling_material)
        CeilingMaterial_List = setListSelectedIndexById(CeilingMaterial_List, default_ceiling_material);

    LintelMaterial_List = listTypeOfMaterial;
    if (default_lintel_material)
        LintelMaterial_List = setListSelectedIndexById(LintelMaterial_List, default_lintel_material);

    LiftingType_Default = true;

    SlopeAngle = default_slope_angle;

    OuterDesign_List = listOuterDesign;
    if (default_outer_design) OuterDesign_List = setListSelectedIndexById(OuterDesign_List, default_outer_design);

    if (default_outer_composition) OuterComposition_List = setListSelectedIndexById(OuterComposition_List, default_outer_composition);

    OuterColorStandard = true;
    initOuterColor();

    DoorType_V4 = true;

    DoorSideWidth = default_door_side_width;

    DoorSideHeight = default_door_side_height;

    DoorPosition_Center = true;

    Hinge_Left = true;

    initDoorSashColor([]);

    WithLock_List = listWithLock;
    if (default_with_lock)
        WithLock_List = setListSelectedIndexById(WithLock_List, default_with_lock);

    WithHandle_List = listWithHandle;
    if (default_with_handle)
        WithHandle_List = setListSelectedIndexById(WithHandle_List, default_with_handle);

    WithGuardRope = false;

    WithGuardBreakRope = false;

    DriveSetup = false;

    DriveModelOverheadStandard_List = listDriveModelOverhead;

    OverheadDevice_List = listOverheadDevice;
    OverheadDevice_List = setListSelectedIndexById(OverheadDevice_List, default_board_control);

    DriveModelPowerStandard_List = listDriveModelPower;

    DriveExtraChain = false;

    AdditionalDevices2460110_List = listAdditionalDevices2460110;

    EdgingPipeColorStandard = true;
    EdgingPipeColorStandard_List = listEdgingPipeColorStandard;
}
else

// ---------------------------------
//  #S.Load: ЗАГРУЗКА/РАСЧЕТ ЗАКАЗА
// ---------------------------------

if (scriptExecCount > 0 && !changedFormFieldID)
{
    IsLoad = true;

    SquareWidth = SquareWidth_up ? SquareWidth_up : default_width;

    SquareHeight = SquareHeight_up ? SquareHeight_up : default_height;

    LeftSideWidth = LeftSideWidth_up;

    RightSideWidth = RightSideWidth_up;

    SquareDepth = SquareDepth_up ? SquareDepth_up : default_depth;

    if (IsDebug) 
        NoticeMessage += "LOAD DEBUG: WallMaterial Index [" + getListSelectedIndex(WallMaterial_List) + "]<br>";

    if (IsDebug) 
        NoticeMessage += "LOAD DEBUG: CeilingMaterial Index [" + getListSelectedIndex(CeilingMaterial_List) + "]<br>";

    if (IsDebug) 
        NoticeMessage += "LOAD DEBUG: LintelMaterial Index [" + getListSelectedIndex(LintelMaterial_List) + "]<br>";

    SlopeAngle = SlopeAngle_up ? SlopeAngle_up : default_slope_angle;

    if (IsDebug) 
        NoticeMessage += "DEBUG: OuterDesign Index [" + getListSelectedIndex(OuterDesign_List) + "]<br>";
    
    setOuterDesign();

    if (IsDebug) 
        NoticeMessage += "DEBUG: OuterComposition Index [" + getListSelectedIndex(OuterComposition_List) + "]<br>";

    initOuterColor();
    if (outerColor_up) {
        if (OuterColor_Custom)
            OuterColor_Value = outerColor_up;
        else
            OuterColor_List = setListSelectedIndexById(OuterColor_List, outerColor_up); 
    }

    DoorSideWidth = DoorSideWidth_up ? DoorSideWidth_up : default_door_side_width;

    DoorSideHeight = DoorSideHeight_up ? DoorSideHeight_up : default_door_side_height;

    initDoorSashColor([]);
    if (doorSashColor_up) {
        if (DoorSashColor_BySample)
            DoorSashColor_Value = doorSashColor_up;
        else
            DoorSashColor_List = setListSelectedIndexById(DoorSashColor_List, doorSashColor_up);
    
        if (IsDebug) 
            NoticeMessage += "LOAD DEBUG: DoorSashColorStandard Index [" + getListSelectedIndex(DoorSashColor_List) + "]<br>";
    }

    if (withLock_up && withLock_up != 'no') {
        WithLock_List = setListSelectedIndexById(WithLock_List, withLock_up); 
        if (IsDebug) 
            NoticeMessage += "DEBUG: WithLock Index [" + getListSelectedIndex(WithLock_List) + "]<br>";
    }

    if (withHandle_up && withHandle_up != 'no') {
        WithHandle_List = setListSelectedIndexById(WithHandle_List, withHandle_up); 
        if (IsDebug) 
            NoticeMessage += "DEBUG: WithHandle Index [" + getListSelectedIndex(WithHandle_List) + "]<br>";
    }

    if (DriveModel_up) {
        var id:String = getListValidId(listDriveModel, DriveModel_up);
        var item:String = 'DriveModelXOverhead_' + id;
        if (id)
            setValue(item, true);
    
        if (IsDebug)
            NoticeMessage += "LOAD DEBUG: DriveModel_up item [" + DriveModel_up + ':' + item + "]<br>";
    }

    if (DriveModel_up) {
        var id:String = getListValidId(listDriveModel, DriveModel_up);
        DriveModelOverheadStandard_List = setListSelectedIndexById(DriveModelOverheadStandard_List, id);
    
        if (IsDebug)
            NoticeMessage += "LOAD DEBUG: DriveModelOverheadStandard Index [" + getListSelectedIndex(DriveModelOverheadStandard_List) + "]<br>";
    }

    if (OverheadDevice_up) {
        OverheadDevice_List = setListSelectedIndexById(OverheadDevice_List, OverheadDevice_up); 
        if (IsDebug) 
            NoticeMessage += "DEBUG: OverheadDevice Index [" + getListSelectedIndex(OverheadDevice_List) + "]<br>";
    }

    if (DriveModelPower_up) {
        var id:String = getListValidId(listDriveModel, DriveModelPower_up);
        var item:String = 'DriveModelXPower_' + id;
        if (id)
            setValue(item, true);
    
        if (IsDebug)
            NoticeMessage += "LOAD DEBUG: DriveModelPower_up item [" + DriveModelPower_up + ':' + item + "]<br>";
    }

    if (DriveModelPower_up) {
        var id:String = getListValidId(listDriveModel, DriveModelPower_up);
        DriveModelPowerStandard_List = setListSelectedIndexById(DriveModelPowerStandard_List, id);
     
        if (IsDebug)
            NoticeMessage += "LOAD DEBUG: DriveModelPowerStandard Index [" + getListSelectedIndex(DriveModelPowerStandard_List) + "]<br>";
    }

    if (DriveModelManual_up) {
        var id:String = getListValidId(listDriveModel, DriveModelManual_up);
        var item:String = 'DriveModelXManual_' + id;
        if (id)
            setValue(item, true);
    
        if (IsDebug)
            NoticeMessage += "LOAD DEBUG: DriveModelManual_up item [" + DriveModelManual_up + ':' + item + "]<br>";
    }

    if (AdditionalDevices2460110_up) {
        AdditionalDevices2460110_List = setListSelectedIndexById(AdditionalDevices2460110_List, AdditionalDevices2460110_up); 
        if (IsDebug) 
            NoticeMessage += "DEBUG: AdditionalDevices2460110 Index [" + getListSelectedIndex(AdditionalDevices2460110_List) + "]<br>";
    }

    if (EdgingPipeColorStandard && edgingPipeColor_up) {
        EdgingPipeColorStandard_List = setListSelectedIndexById(EdgingPipeColorStandard_List, edgingPipeColor_up);
        if (IsDebug)
            NoticeMessage += "DEBUG: EdgingPipeColorStandard Index [" + getListSelectedIndex(EdgingPipeColorStandard_List) + "]<br>";
    }

    if (AdditionalDevices_PanelBezel_Value) {
        var x:Array = AdditionalDevices_PanelBezel_Value.split(string_delimeter);
        if (x.length == 2) {
            AdditionalDevices_PanelBezel_Width = parseInt(x[0]);
            AdditionalDevices_PanelBezel_Height = parseInt(x[1]);
            AdditionalDevices_PanelBezel = true;
        } else {
            AdditionalDevices_PanelBezel = false;
        }
    }

    if (constSavedImage && constSavedImage != defaultImage && scriptExecCount > 0) image = constSavedImage;
}



// ---------------------------------
//  #S.Begin: НАЧАЛЬНЫЕ ОПРЕДЕЛЕНИЯ
// ---------------------------------

shield_enabled = !Compound_SlideRailsOnly ? 1 : 0;

slide_rails_enabled = !Compound_ShieldOnly ? 1 : 0;

setOuterDesign();

checkStatusOfDoor();

checkStatusOfDoorSashColor();

if (['DriveModelOverheadStandard', 'DriveModelPowerStandard', 'DriveModelManualStandard'].indexOf(changedFormFieldID) > -1) {
    if (changedFormFieldID == 'DriveModelOverheadStandard') {
        DriveModelPowerStandard = DriveModelOverheadStandard ? false : DriveModelPowerStandard;
        DriveModelManualStandard = DriveModelOverheadStandard ? false : DriveModelManualStandard;
    }
    if (changedFormFieldID == 'DriveModelPowerStandard') {
        DriveModelOverheadStandard = DriveModelPowerStandard ? false : DriveModelOverheadStandard;
        DriveModelManualStandard = DriveModelPowerStandard ? false : DriveModelManualStandard;
    }
    if (changedFormFieldID == 'DriveModelManualStandard') {
        DriveModelOverheadStandard = DriveModelManualStandard ? false : DriveModelOverheadStandard;
        DriveModelPowerStandard = DriveModelManualStandard ? false : DriveModelPowerStandard;
    }
}

checkStatusOfDriveModel();

checkStatusOfDriveModelManual();

checkStatusOfEdgingPipeColor();

// --------------------------------------
//  #S.OnChange: ОБРАБОТКА СОБЫТИЙ ФОРМЫ
// --------------------------------------

if (changedFormFieldID)
{
    var ids:Array = new Array(
    'SquareWidth', 'SquareHeight', 'Platband_Size', 'LeftSideWidth', 'RightSideWidth', 'SquareDepth', 
    'TypeOfWallMaterial_Concrete', 'TypeOfWallMaterial_Wood', 'TypeOfWallMaterial_Brick', 'TypeOfWallMaterial_PerforatedBrick', 
    'TypeOfCeilingMaterial_Concrete', 'TypeOfCeilingMaterial_Wood', 'TypeOfCeilingMaterial_Brick', 'TypeOfCeilingMaterial_PerforatedBrick', 
    'TypeOfLintelMaterial_Concrete', 'TypeOfLintelMaterial_Wood', 'TypeOfLintelMaterial_Brick', 'TypeOfLintelMaterial_PerforatedBrick');
    if (ids.indexOf(changedFormFieldID) > -1) {
        image = 'square.jpg';
    }

    if (changedFormFieldID == 'OuterComposition_List' && shield_enabled) {
        var x:String = selected_outer_composition.toLowerCase();
        image = x.length > 0 ? 'composition-' + x + '.jpg' : defaultImage;
    }

    if ((changedFormFieldID == 'DoorSetup' || IsStringStartedWith(changedFormFieldID, 'DoorType_') || IsStringStartedWith(changedFormFieldID, 'SashColorStandard')) && DoorSetup) {
        image = 'door-' + (DoorPosition_Left ? 'left' : (DoorPosition_Right ? 'right' : 'center')) + '.jpg';
    }

    if (IsStringStartedWith(changedFormFieldID, 'DoorPosition_'))
        setImageOfDoorPosition();

    if (IsStringStartedWith(changedFormFieldID, 'Hinge_'))
        setImageOfHingePosition();

    if (changedFormFieldID == 'AdditionalDevices_DHPNT')
        image = AdditionalDevices_DHPNT ? 'DHPNT.jpg' : defaultImage;

    if (changedFormFieldID == 'AdditionalDevices_SPV')
        image = AdditionalDevices_SPV ? 'SPV.jpg' : defaultImage;
}



// -------------------------------------------------
//  #S.OnControl: ИНТЕРАКТИВНЫЙ КОНТРОЛЬ ПАРАМЕТРОВ
// -------------------------------------------------

if (scriptExecCount > 0 && IsExist('helperProductControl') && helperProductControl['active'])
{
    if (IsTrue('DriveSetup') && !(PowerDriveSetupFuture || IsTrue('DriveModelOverheadStandard') || IsTrue('DriveModelPowerStandard') || IsTrue('DriveModelManualStandard'))) {
        if (isConfirmation) {
            ConfirmationNote = '';
            if (confirmCode == 1) {
                ConfirmationNote = ConfirmationShortMessage;
                DriveModelOverheadStandard = true;
            } else {
                DriveSetup = false;
            }
            helperProductControl.finalize = true;
            isConfirmation = false;
        } else {
            confirmMessage = DriveConfirmationMessage;
        }
    } else {
        helperProductControl.finalize = true;
    }
}

// --------------------------------
//  #S.Main: УСТАНОВКА КОНСТРУКЦИИ
// --------------------------------

if (helperErrorCode == 0)
{
    if (Compound_ShieldOnly) setShieldOnly();

    if (Compound_SlideRailsOnly) setSlideRailsOnly();

    SquareWidth_up = SquareWidth;

    SquareHeight_up = SquareHeight;

    var square_aperture:Number = (SquareWidth * SquareHeight)/1000000;
    SquareAperture = square_aperture.toString();

    LeftSideWidth_up = LeftSideWidth;

    RightSideWidth_up = RightSideWidth;

    SquareDepth_up = SquareDepth;

    var ids:Array = ['SquareHeight', 'SquareDepth', 'IsOptimizeLifting'];
    if (IsStringStartedWith(changedFormFieldID, 'LiftingType_') || ids.indexOf(changedFormFieldID) > -1) {
        if (LiftingType_Default) {
            min_square_depth = SquareHeight + 400;
            checkSquareDepth(min_square_depth, msgDepthDefault);
        }
        if (LiftingType_LowRollFront) {
            min_square_depth = SquareHeight + 300;
            checkSquareDepth(min_square_depth, msgDepthLowRollFront);
        }
        if (LiftingType_LowRollBack) {
            min_square_depth = SquareHeight + 400;
            checkSquareDepth(min_square_depth, msgDepthLowRollBack);
        }
        if (LiftingType_High) {
            min_square_depth = SquareHeight - Platband_Size + 600;
            checkSquareDepth(min_square_depth, msgDepthHigh);
        }
        if (LiftingType_Vertical) {
            min_square_depth = 270;
            checkSquareDepth(min_square_depth, msgDepthVertical);
        }
        if (LiftingType_Downward) {
            min_square_depth = SquareHeight + 1450;
            checkSquareDepth(min_square_depth, msgDepthDownward);
        }
        if (LiftingType_LowDownwardRollBack) {
            min_square_depth = SquareHeight + 400;
            checkSquareDepth(min_square_depth, msgDepthLowDownwardRollBack);
        }
        if (LiftingType_HighDownward) {
            min_square_depth = SquareHeight - Platband_Size + 1730;
            checkSquareDepth(min_square_depth, msgDepthHighDownward);
        }
    }

    setWallMaterial();

    setCeilingMaterial();

    setLintelMaterial();

    checkStatusOfLiftingType();

    if (changedFormFieldID) {
        if (IsStringStartedWith(changedFormFieldID, 'LiftingType_')) {
            // оставить возможность выбора подъема в случае, если он не рекомендован
            IsOptimizeLifting = false;
        } else if (IsOptimizeLifting) {
            var ids:Array = new Array('SquareHeight', 'SquareWidth', 'Platband_Size', 'SquareDepth', 'SlopeAngle');
            if (ids.indexOf(changedFormFieldID) > -1) {
                optimizeLifting();
            }
        }
        setValidBooleanItemByKey('LiftingType_');
    }

    SlopeAngle_up = SlopeAngle;

    checkStatusOfSlopeAngle();

    if (changedFormFieldID == 'IsOptimizeLifting') {
        optimizeLifting();
    }

    if (['Classic'].indexOf(selected_outer_design) > -1) {
        OuterComposition_List = blockItems('OuterComposition_List', ['Wood'], listOuterComposition);
        if ((!changedFormFieldID || changedFormFieldID == 'OuterDesign_List') && !IsLoad)
            OuterComposition_List = setListSelectedIndexById(OuterComposition_List, 'Stucco');
    }

    if (['Smooth', 'Wave'].indexOf(selected_outer_design) > -1) {
        OuterComposition_List = listOuterComposition;
        blockListItems('OuterComposition_List', ['Smooth', 'Wood']);
        OuterComposition_List = setListSelectedIndexById(OuterComposition_List, 'Stucco');
    }

    if (['WideBand', 'Panel'].indexOf(selected_outer_design) > -1) {
        OuterComposition_List = listOuterComposition;
        blockListItems('OuterComposition_List', ['Smooth', 'Stucco']);
        OuterComposition_List = setListSelectedIndexById(OuterComposition_List, 'Wood');
    }

    if (changedFormFieldID == 'OuterDesign_List' && IsOuterDesignPremiumHiTech)
        OuterComposition_List = listOuterComposition;

    setOuterComposition();

    checkStatusOfOuterColor();

    var ids:Array = new Array('OuterColorStandard', 'OuterColorNonStandard', 'OuterColorWood', 'OuterColor_Custom', 'OuterDesign_List');
    if (ids.indexOf(changedFormFieldID) > -1) {
        initOuterColor();
    }
    setOuterColor();

    innerDesign_up = default_inner_design;

    innerComposition_up = default_inner_composition;

    var selected_inner_color:String = default_inner_color_custom;
    innerColor_up = selected_inner_color;

    if (IsOuterDesignPremiumClassic && InnerPremiumSetup) {
        innerDesign_up = outerDesign_up;
        innerComposition_up = ''
    }

    if (IsOuterDesignPremiumHiTech && InnerPremiumSetup) {
        innerDesign_up = outerDesign_up;
        innerComposition_up = outerComposition_up = '';
    }

    if (no_sandwich_panel) {
        innerDesign_up = innerComposition_up = '';
        innerColor_up = selected_inner_color = '';
    }

    objectStatus["DoorPosition_Value"] = DoorPosition_Distance ? 1 : 0;

    setWithLock();

    setWithHandle();

    objectStatus['WithGuardRope'] = WithGuardBreakRope ? 0 : 1;

    objectStatus['WithGuardBreakRope'] = WithGuardRope ? 0 : 1;

    checkStatusOfDriveGroup();

    /*
    if (IsDriveModel && ['DriveSetup', 'DriveModelOverheadStandard', 'SquareWidth', 'SquareHeight'].indexOf(changedFormFieldID) > -1 && !IsLoad) {
        DriveModelXOverhead_SE500 = true;
    }
    */

    var IsCheckOverhedDriveStatus:Boolean = false;
    if (IsTrue('DriveModelOverheadStandard') && (
            ['DriveModelOverheadStandard', 'SquareWidth', 'SquareHeight'].indexOf(changedFormFieldID) > -1 || 
             IsStringStartedWith(changedFormFieldID, 'DriveModelXOverhead_') || 
            (['DriveModelOverheadStandard_List', 'OverheadDevice_List'].indexOf(changedFormFieldID) > -1 && IsDriveModel)
        )) {
        DriveModelOverheadStandard_List = listDriveModelOverhead;
        IsCheckOverhedDriveStatus = true;
    }
    
    if (IsDebug)
        NoticeMessage += "DEBUG: IsCheckOverhedDriveStatus [" + IsCheckOverhedDriveStatus + "]<br>";

    if (IsCheckOverhedDriveStatus && SquareHeight > 2300) {
        blockListItems('DriveModelOverheadStandard_List', ['DIY500KIT']);
    }

    if (IsCheckOverhedDriveStatus && square_aperture > 8) {
        blockListItems('DriveModelOverheadStandard_List', ['DIY500KIT', 'SE500KIT', 'SE500', 'SE500PROWHITEKIT', 'SE500PROBLACKKIT']);
        objectStatus["DriveModelXOverhead_SE500"] = 0;
        objectStatus["DriveModelXOverhead_SE500PROWHITE"] = 0;
        objectStatus["DriveModelXOverhead_SE500PROBLACK"] = 0;
    }

    if (IsCheckOverhedDriveStatus && square_aperture > 9) {
        blockListItems('DriveModelOverheadStandard_List', ['D600KIT']);
    }

    if (IsCheckOverhedDriveStatus && square_aperture > 10) {
        blockListItems('DriveModelOverheadStandard_List', ['SE750KIT', 'FA750KIT', 'TIZIANODHKIT']);
        objectStatus["DriveModelXOverhead_SE750"] = 0;
        objectStatus["DriveModelXOverhead_FAST750"] = 0;
    }

    if (IsCheckOverhedDriveStatus && square_aperture > 12) {
        blockListItems('DriveModelOverheadStandard_List', ['D1000KIT']);
    }

    if (IsCheckOverhedDriveStatus && square_aperture > 13) {
        blockListItems('DriveModelOverheadStandard_List', ['SE1000KIT']);
        objectStatus["DriveModelXOverhead_SE1000"] = 0;
    }

    if (IsDriveModel) setValidBooleanItemByKey('DriveModelXOverhead_');

    var IsCheckOverheadDeviceStatus:Boolean = false;
    if (IsDriveModel && (!constSavedIsDriveModel || ['SquareHeight'].indexOf(changedFormFieldID) > -1) || IsStringStartedWith(changedFormFieldID, 'DriveModelXOverhead_')) {
        OverheadDevice_List = listOverheadDevice;
        IsCheckOverheadDeviceStatus = true;
    }

    if (IsCheckOverheadDeviceStatus) {
        var IsA:Boolean = IsTrue('DriveModelXOverhead_SE500');
        var IsB:Boolean = IsTrue('DriveModelXOverhead_SE500PROWHITE') || IsTrue('DriveModelXOverhead_SE500PROBLACK') || IsTrue('DriveModelXOverhead_FAST750') || IsTrue('DriveModelXOverhead_SE750') || IsTrue('DriveModelXOverhead_SE1000') || IsTrue('DriveModelXOverhead_SE1200');
        if (!(IsA && SquareHeight <= 2600)) {
            blockListItems('OverheadDevice_List', ['O1']);
        }
        if (!(IsB && SquareHeight <= 2600)) {
            blockListItems('OverheadDevice_List', ['O7']);
        }
        if (!(IsB && SquareHeight <= 2800)) {
            blockListItems('OverheadDevice_List', ['O4', 'O5']);
        }
        if (!(IsB && SquareHeight <= 3400)) {
            blockListItems('OverheadDevice_List', ['O9']);
        }
        if (!(IsB && SquareHeight <= 3800)) {
            blockListItems('OverheadDevice_List', ['O6']);
        }
    }

    setOverheadDevice();

    checkStatusOfDriveModelPower();

    var IsCheckPowerDriveStatus:Boolean = false;
    if (IsTrue('DriveModelPowerStandard') && ['DriveSetup', 'DriveModelPowerStandard', 'SquareWidth', 'SquareHeight'].indexOf(changedFormFieldID) > -1) {
        DriveModelPowerStandard_List = listDriveModelPower;
        IsCheckPowerDriveStatus = true;
    }

    if (IsCheckPowerDriveStatus && square_aperture > 12) {
        blockListItems('DriveModelPowerStandard_List', ['SH20KIT']);
    }

    if (IsCheckPowerDriveStatus && square_aperture > 18) {
        blockListItems('DriveModelPowerStandard_List', ['SH30KIT', 'SH30IP65KIT']);
    }

    if (IsCheckPowerDriveStatus && square_aperture > 23) {
        blockListItems('DriveModelPowerStandard_List', ['SH45KIT', 'ARGODHKIT']);
    }

    if (IsCheckPowerDriveStatus && square_aperture > 25) {
        blockListItems('DriveModelPowerStandard_List', ['SH50KIT', '540BPRKIT']);
        objectStatus["DriveModelXPower_SE524"] = 0;
    }

    if (IsCheckPowerDriveStatus && square_aperture > 28) {
        blockListItems('DriveModelPowerStandard_List', ['SH60KIT', 'SH60IP65KIT', '540BPRKIT']);
    }

    if (IsDriveModelPower) setValidBooleanItemByKey('DriveModelXPower_');

    if (IsTrue('DriveModelManualStandard') && ['DriveSetup', 'DriveModelManualStandard', 'SquareWidth', 'SquareHeight'].indexOf(changedFormFieldID) > -1 && !IsLoad) {
        DriveModelXManual_25025M = true;
        setValidBooleanItemByKey('DriveModelXManual_');
    }

    setAdditionalDevices2460110();

    setEdgingPipeColor();

    objectStatus["AdditionalDevices_PanelBezel_Width"] = objectStatus["AdditionalDevices_PanelBezel_Height"] = AdditionalDevices_PanelBezel ? 1 : 0;
}

// ------------------------------------
//  #S.Extra: ДОПОЛНИТЕЛЬНАЯ ОБРАБОТКА
// ------------------------------------

var ids:Array = new Array('IsOptimizeLifting');
if (IsStringStartedWith(changedFormFieldID, 'LiftingType_') || ids.indexOf(changedFormFieldID) > -1) {
    if (LiftingType_Default) image = 'lifting-standard.jpg'; else
    if (LiftingType_LowRollFront) image = 'lifting-low_roll_front.jpg'; else
    if (LiftingType_LowRollBack) image = 'lifting-low_roll_back.jpg'; else
    if (LiftingType_High) image = 'lifting-high.jpg'; else
    if (LiftingType_Vertical) image = 'lifting-vertical.jpg'; else
    if (LiftingType_Downward) image = 'lifting-downward.jpg'; else
    if (LiftingType_LowDownwardRollBack) image = 'lifting-low_downward_roll_back.jpg'; else
    if (LiftingType_HighDownward) image = 'lifting-high_downward.jpg';
    constSavedImage = image;
}

setSelectedDriveModel();

if (['SH30KIT','SH45KIT','SH50KIT','SH60KIT','540BPRKIT'].indexOf(selected_drive_model) > -1 || IsTrue('DriveModelManualStandard')) p_extrachain = 8000;

if (['SH120KIT'].indexOf(selected_drive_model) > -1) p_extrachain = 12000;

if (['SE524','SE1421'].indexOf(selected_drive_model) > -1) p_extrachain = 7000;

setDriveExtraChain(p_extrachain);

setDriveModel();

if (['PowerDriveSetupFuture', 'DriveModelOverheadStandard', 'DriveModelOverheadStandard_List', 'DriveModelPowerStandard', 'DriveModelPowerStandard_List', 'DriveModelManualStandard'].indexOf(changedFormFieldID) > -1
    || IsStringStartedWith(changedFormFieldID, 'DriveModelX'))
    ConfirmationNote = '';

var thermal_profile_square:Number = IsTrue('AdditionalDevices_DHPNT') ? roundInteger((SquareHeight + 40)/1000, 1) : 0;

var external_packer_square:Number = IsTrue('AdditionalDevices_SPV') ? roundInteger((SquareHeight*2 + SquareWidth)/6000, 1) : 0;

AdditionalDevices_PanelBezel_Value = AdditionalDevices_PanelBezel && AdditionalDevices_PanelBezel_Width > 0 && AdditionalDevices_PanelBezel_Height > 0 ? AdditionalDevices_PanelBezel_Width.toString() + string_delimeter + AdditionalDevices_PanelBezel_Height.toString() : '';

// ------------------------------------
//  #S.Validation: КОНТРОЛЬ ПАРАМЕТРОВ
// ------------------------------------

if ((IsForcedValidation || (scriptExecCount > 0 && !IsLoad)) && !validation_disable && !withoutRestriction)
{
    blockConstructConstants(['maxSquareWidth', 'maxSquareHeight']);

    if (SquareWidth < minSquareWidth || SquareWidth > maxSquareWidth)
    {
        helperErrorCode = -3;
        helperErrorMessage = SquareWidthMessage.replace('MIN', minSquareWidth).replace('MAX', maxSquareWidth);
    }

    if (SquareHeight < minSquareHeight || SquareHeight > maxSquareHeight)
    {
        helperErrorCode = -3;
        helperErrorMessage = SquareHeightMessage.replace('MIN', minSquareHeight).replace('MAX', maxSquareHeight);
    }

    var ids:Array = new Array('SquareWidth', 'SquareHeight');
    if (ids.indexOf(changedFormFieldID) > -1) {
        checkSquareHeightWidth(6000, 7800);
        checkSquareHeightWidth(6200, 7600);
        checkSquareHeightWidth(6400, 7400);
        checkSquareHeightWidth(6600, 7200);
        checkSquareHeightWidth(6800, 7000);
        checkSquareHeightWidth(7000, 6800);
        checkSquareHeightWidth(7200, 6600);
        checkSquareHeightWidth(7400, 6400);
        checkSquareHeightWidth(7600, 6200);
        checkSquareHeightWidth(7800, 6000);
    }

    if (Platband_Size < minPlatband_Size1)
    {
        helperErrorCode = -3;
        helperErrorMessage = PlatbandSize1Message;
    }

    if (LeftSideWidth < constLeftSideWidth)
    {
        helperErrorCode = -3;
        helperErrorMessage = LeftSideWidthMessage;
    }

    if (RightSideWidth < constRightSideWidth)
    {
        helperErrorCode = -3;
        helperErrorMessage = RightSideWidthMessage;
    }

    blockConstructStatus('LiftingType', '_');

    if (!isSlopeAngleValid(false))
    {
        helperErrorCode = -3;
        helperErrorMessage = MaxSlopeAngleMessage.replace('XXX', maxSlopeAngle);
    }

    if (objectStatus["SlopeAngle"] && SlopeAngle == 45)
    {
        helperErrorCode = -3;
        helperErrorMessage = V45SlopeAngleMessage;
    }

    if (changedFormFieldID == 'SlopeAngle' && (LiftingType_Downward || LiftingType_HighDownward) && !isSlopeAngle_5())
    {
        helperErrorCode = -3;
        helperErrorMessage = SlopeAngle_5_Message;
    }

    if (selected_outer_design == 'Panel' && selected_inner_design == 'Panel') {
        helperErrorCode = -3;
        helperErrorMessage = SidePanelMessage;
    }

    blockConstructListItems('OuterDesign_List');

    blockConstructListItems('OuterComposition_List');

    blockConstructListItems('OuterColor_List');

    if (DoorSetup && (IsOuterDesignSmooth || IsOuterDesignPanel || IsOuterDesignPremium)) {
        if (changedFormFieldID == 'DoorSetup') {
            helperErrorCode = -3;
            helperErrorMessage = DoorTypeErrorMessage;
        } else {
            DoorSetup = false;
            checkStatusOfDoor();
            attentionMessage = DoorTypeErrorMessage + '\n';
        }
    }

    if (DoorSetup && Compound_SlideRailsOnly) {
        DoorSetup = false;
    }

    var max_square_width:Number = 6000; 
    if (SquareWidth > max_square_width && DoorSetup) {
        helperErrorCode = -28;
        helperErrorMessage = DoorSetupErrorMessage.replace('WIDTH', max_square_width.toString());
        if (DoorSetup && changedFormFieldID == 'DoorSetup' && IsEnabled('DoorSetup')) {
            DoorSetup = false;
            checkStatusOfDoor();
        }
    }

    if (DoorSetup) {
        if (SquareWidth < 4500) {
            objectStatus["DoorType_V2"] = 0;
        }
        if (SquareWidth >= 4500) {
            objectStatus["DoorType_V3"] = objectStatus["DoorType_V5"] = 0;
        }
        if (SquareWidth > 6000) {
            objectStatus["DoorType_V4"] = 0;
        }
    }

    if (DoorSetup) {
        if (!(DoorType_V2 || DoorType_V3 || DoorType_V5) && objectStatus["DoorType_V4"])
            DoorType_V4 = true; 
    }

    blockConstructStatus('DoorType', '_');

    if (DoorSetup)
        setValidBooleanItemByKey('DoorType_');

    if (DoorSetup && (DoorSideWidth < minDoorSideWidth || DoorSideWidth > maxDoorSideWidth))
    {
        helperErrorCode = -3;
        helperErrorMessage = DoorSideWidthMessage;
    }

    if (IsTrue('DoorSetup')) {
        var keys:Array = ['V2','V3','V4','V5'];
        for (var i:int=0; i < keys.length; i++) {
            var key:String = keys[i];
            if (IsTrue('DoorType_'+key)) {
                DoorSideWidth = self['constDoorSideWidth_'+key];
                objectStatus["DoorSideWidth"] = 0;
            }
        }
    }

    if (DoorSetup && (DoorSideHeight < minDoorSideHeight || DoorSideHeight > maxDoorSideHeight))
    {
        helperErrorCode = -3;
        helperErrorMessage = DoorSideHeightMessage;
    }

    if (sash_enabled && (IsStringStartedWith(changedFormFieldID, 'DoorType_') || !scriptExecCount || IsLoad)) {
        var options:Array = IsTrue('DoorType_V2') || IsTrue('DoorType_V3') ? ['9003', '8014'] : [];
        initDoorSashColor(options);
    }

    if (sash_enabled && ((IsFalse('DoorType_V4') && IsFalse('DoorType_V5')) || !IsCountry('moscow'))) {
        objectStatus["DoorSashColor_BySample"] = objectStatus["DoorSashColor_Value"] = 0;
        setValidBooleanItemByKey('DoorSashColor');
    }

    if (!IsCountry('Москва')) objectStatus["AdditionalDevices_DHPNT"] = 0;

    if (!IsCountry('Москва')) objectStatus["AdditionalDevices_SPV"] = 0;
}

// --------------------
//  #S.End: ЗАВЕРШЕНИЕ
// --------------------

if (IsDebug) {
    NoticeMessage += "DEBUG: country_path [" + country_path + "]<br>" +
                     "DEBUG: countryID [" + countryID + "]<br>" +
                     "DEBUG: regionID [" + regionID + "]<br>" +
                     "DEBUG: helperHostName [" + helperHostName + "]<br>" +
                     "DEBUG: image [" + image + "]<br>"
    ;
}

if (!changedFormFieldID)
    image = defaultImage;
if (!IsStringStartedWith(changedFormFieldID, 'Compound_') && (image == defaultImage || !image)) {
    image = constSavedImage && constSavedImage != defaultImage ? constSavedImage : defaultImage;
}

checkStatusOfOuterDesign();

if ((['OuterDesign_List', 'OuterComposition_List', 'OuterColor_List'].indexOf(changedFormFieldID) > -1 || 
     IsStringStartedWith(changedFormFieldID, 'PremiumDesign_') || 
     IsStringStartedWith(changedFormFieldID, 'OuterColor')
     ) && shield_enabled) {
    if (['Classic', 'Smooth', 'Wave', 'Panel'].indexOf(selected_outer_design) > -1 && !OuterColor_Custom)
    {
        common_image = 'design';
        image = selected_outer_design + '-' + selected_outer_color + '.jpg';
        IsOuterColorChanged = true;
    }
    else if (['PremiumClassic', 'PremiumCountry', 'PremiumHiTech'].indexOf(selected_outer_design) > -1)
        setImageOfPremium();
    else
        setImageDefault();
}

checkStatusOfOuterComposition();

checkStatusOfOuterComposition();

IsColorImageDisabled = ['Walnut'].indexOf(selected_outer_color) > -1 ? true : false;

setColorImage(0);

if (['OuterColor_Custom', 'OuterColor_Value'].indexOf(changedFormFieldID) > -1 && IsTrue('OuterColor_Custom')) image = 'ral.jpg';

setColorImage(1);

setCompositionColorImage(2);

DoorSideWidth_up = IsTrue('DoorSetup') ? DoorSideWidth : 0;

DoorSideHeight_up = IsTrue('DoorSetup') ? DoorSideHeight : 0;

setDoorSashColor();

checkStatusOfWithLock();

checkStatusOfWithHandle();

checkStatusOfWindows();

constSavedIsDriveModel = IsDriveModel ? 1 : 0;

checkStatusOfDriveExtraChain();

checkStatusOfAdditionalDevices2460110();

if (IsStringStartedWith(changedFormFieldID, 'AdditionalDevices_PanelBezel')) {
    image = AdditionalDevices_PanelBezel ? 'panel-bezel.jpg' : image;
}

// ----------------------------
//  #S.Prices: ЦЕНООБРАЗОВАНИЕ
// ----------------------------

if (!prices_disable && helperErrorCode == 0)
{
    if (scriptExecCount < 2 && defaultProduct == with_door_product && !DoorSetup) {
        DoorSetup = true;
    }

    if (!WithPanoramicPanel) {
        if (DoorSetup) {
            construct_default = 0;
            defaultConstruct = with_door_product;
            defaultConstructCount = 1;
        } else {
            // базовая цена - основное изделие
            construct_default = 1;
        }
    }

    if (Compound_Default && IsCountry('Азия'))
        margins = addExtraMargin(margins, ['00000015225', 'STRING', 796, 1]);

    if (Compound_Default && !IsCountry('Азия'))
        margins = addMargin(margins, ['00000127987', 'NUMBER', 796, 1]);

    if (Compound_ShieldOnly) margins = addExtraMargin(margins, ['00000125505', 'STRING', 796, 1]);

    if (Compound_SlideRailsOnly) margins = addExtraMargin(margins, ['00000125506', 'STRING', 796, 1]);

    if (IsTrue('LiftingType_LowRollFront') && !blockConstructByPriceType('S00000011668'))
        margins = addMargin(margins, ['00000011668', 'NUMBER', 796, 1]); // СП01
    else if (IsTrue('LiftingType_LowRollBack'))
        margins = addMargin(margins, ['00000014634', 'NUMBER', 796, 1]); // СП04
    else if (IsTrue('LiftingType_LowDownwardRollBack'))
        margins = addMargin(margins, ['00000126875', 'NUMBER', 796, 1]); // СП34
    else if (IsTrue('LiftingType_Downward'))
        margins = addMargin(margins, ['00000011991', 'NUMBER', 796, 1]); // СП05
    else if (IsTrue('LiftingType_High'))
        margins = addMargin(margins, ['00000011670', 'NUMBER', 796, 1]); // СП03
    else if (IsTrue('LiftingType_HighRollBottom'))
        margins = addMargin(margins, ['00000101878', 'NUMBER', 796, 1]); // СП06
    else if (IsTrue('LiftingType_HighDownward'))
        margins = addMargin(margins, ['00000107384', 'NUMBER', 796, 1]); // SP08
    else if (IsTrue('LiftingType_HighDownwardRollBottom'))
        margins = addMargin(margins, ['00000144314', 'NUMBER', 796, 1]); // СП39
    else if (IsTrue('LiftingType_Vertical'))
        margins = addMargin(margins, ['00000011669', 'NUMBER', 796, 1]); // СП02
    else if (IsTrue('LiftingType_VerticalRollBottom'))
        margins = addMargin(margins, ['00000101879', 'NUMBER', 796, 1]); // СП07

    if (shield_enabled && IsOuterDesignPanel) margins = addMargin(margins, ['00000101398', 'NUMBER', 796, 1]);

    if (shield_enabled && IsOuterDesignPremiumClassic) margins = addMargin(margins, ['00000133315', 'NUMBER', 796, 1]);

    if (shield_enabled && IsOuterDesignPremiumCountry) margins = addMargin(margins, ['00000139356', 'NUMBER', 796, 1]);

    if (shield_enabled && IsOuterDesignPremiumHiTech) margins = addMargin(margins, ['00000146749', 'NUMBER', 796, 1]);

    if (shield_enabled && IsPriceType('16') && OuterColorNonStandard) margins = addMargin(margins, ['00000015628', 'NUMBER', 796, 1]);

    var lst:Array = new Array(
      'Alder-Ольха              :00000138171', 
      'Beech-Бук                :00000138173', 
      'ForestWalnut-Лесной орех :00000138174', 
      'Mahagony-Махагон         :00000138175', 
      'Wenge-Венге              :00000138176',
      'GoldenOak-Золотой дуб    :00000124963',
      'GreenOak-Зелёный дуб     :00000124964'
    );
    if (shield_enabled && OuterColorWood) addColorMargins(OuterColor_List, lst, 0);

    var colors:Array = new Array('Maple', 'Cherry', 'Walnut');
    if (shield_enabled && OuterColorWood && checkColorListMatched(OuterColor_List, colors, 0)) margins = addMargin(margins, ['00000104641', 'NUMBER', 796, 1]);

    if (shield_enabled && OuterColor_Custom && parseInt(OuterColor_Value) > 0) margins = addMargin(margins, ['00000011685', 'NUMBER', 055, square_aperture]);

    var colors:Array = new Array('зебра', 'Zebra');
    if (shield_enabled && checkColorListMatched(OuterColor_List, colors, 0)) margins = addMargin(margins, ['00000144294', 'NUMBER', 796, 1]);

    if (IsTrue('DoorType_V2')) margins = addMargin(margins, ['00000119496', 'NUMBER', 796, 1]);

    if (IsTrue('DoorType_V3')) margins = addMargin(margins, ['00000146352', 'NUMBER', 796, 1]);

    if (IsTrue('DoorType_V4')) margins = addExtraMargin(margins, ['CB000149052', 'STRING', 796, 1]);

    if (IsTrue('DoorType_V5')) margins = addExtraMargin(margins, ['CB000149367', 'STRING', 796, 1]);

    var IsPanel:int = (IsOuterDesignPanel || selected_inner_design == 'Panel') ? 1 : 0;
    var IsPanel45:int = 0;

    if (sash_enabled && DoorSashColor_BySample && doorSashColor_up)
    margins = addExtraMargin(margins, ['CB000206188', 'STRING', 796, 1]);

    var square_of_panel:Number = (AdditionalDevices_PanelBezel_Width * AdditionalDevices_PanelBezel_Height)/1000000;
    if (AdditionalDevices_PanelBezel && square_of_panel > 0) margins = addMargin(margins, ['00000128991', 'NUMBER', 055, square_of_panel]);

    if (Packaging_Wood)
    margins = addMargin(margins, ['00000016097', 'NUMBER', 796, 1]);

    if (with_lock && selected_lock_code) margins = addExtraMargin(margins, [selected_lock_code, 'STRING', 796, 1]);

    if (with_handle && selected_handle_code) margins = addExtraMargin(margins, [selected_handle_code, 'STRING', 796, 1]);

    if (selected_drive_code) margins = addExtraMargin(margins, [selected_drive_code, 'STRING', 796, 1]);

    if (WithGuardRope)
        margins = addMargin(margins, ['00000112634', 'NUMBER', 796, 1]); // СП12
    if (WithGuardBreakRope)
        margins = addMargin(margins, ['00000103352', 'NUMBER', 796, 1]); // СП11
    if (WithGuardBreakSpring && shield_enabled)
        margins = addMargin(margins, ['00000000000', 'NUMBER', 796, 1]); // СП10

    if (IsTrue('AdditionalDevices_Anticorr') && SquareHeight <= 3000) margins = addExtraMargin(margins, ['CB000161595', 'STRING', 796, 1]);

    if (IsTrue('AdditionalDevices_Anticorr') && SquareHeight > 3000) margins = addExtraMargin(margins, ['CB000161596', 'STRING', 796, 1]);

    if (IsTrue('DriveExtraChain') && ['SH30KIT','SH45KIT','SH50KIT','SH60KIT'].indexOf(selected_drive_model) > -1 && drive_extrachain_length > 0) margins = addMargin(margins, ['00000125009', 'NUMBER', 796, drive_extrachain_length]);

    if (IsTrue('DriveExtraChain') && ['SH120KIT'].indexOf(selected_drive_model) > -1 && drive_extrachain_length > 0) margins = addMargin(margins, ['00000138852', 'NUMBER', 796, drive_extrachain_length]);

    if (IsTrue('DriveExtraChain') && ['540BPRKIT','SE524','SE1421'].indexOf(selected_drive_model) > -1 && drive_extrachain_length > 0) margins = addMargin(margins, ['00000013470', 'NUMBER', 796, drive_extrachain_length]);

    if (IsTrue('DriveExtraChain') && IsTrue('DriveModelManualStandard') && drive_extrachain_length > 0) margins = addMargin(margins, ['00000000245', 'NUMBER', 796, drive_extrachain_length]);

    if (AdditionalDevices2460110_up) margins = addMargin(margins, ['00000139880', 'NUMBER', 796, AdditionalDevices2460110_up]);

    if (selected_overhead_device_code) margins = addExtraMargin(margins, [selected_overhead_device_code, 'STRING', 796, 1]);

    if (thermal_profile_square) {
        margins = addExtraMargin(margins, ['CB000004329', 'STRING', '055', thermal_profile_square]);
        margins = addExtraMargin(margins, ['CB000004329', 'STRING', '055', thermal_profile_square]);
    }

    if (external_packer_square)
        margins = addExtraMargin(margins, ['00000137405', 'STRING', '055', external_packer_square]);

    if (IsTrue('AdditionalDevices_SPV') && !blockConstructByPriceType('S00000137446')) margins = addExtraMargin(margins, ['00000137446', 'NUMBER', 796, 1]);

    if (IsDeepDebug) {
        var lst:Array = getList(margins);
        if (lst.length) {
            NoticeMessage += "DEEPDEBUG: margins:<br>";
            for (var i:int=0; i<lst.length; i++) {
                NoticeMessage += "==> [" + lst[i] + "]<br>";
            }
        }
    }
}

// -----------------------
//  #S.Trace: ТРАССИРОВКА
// -----------------------

var IsTrace:Boolean = new Boolean(false);

if (IsTrace) {
    NoticeMessage = 
        "***<br>" +
    NoticeMessage;
}



//
//  =================
//

if (IsDeepDebug) {
    NoticeMessage += 
        "DEEPDEBUG: total images:" + imagePath.length + "<br>" +
        "DEEPDEBUG: imagePath:" + "<br>";
    for (var i=0; i<imagePath.length; i++) {
        NoticeMessage += "==> [" + imagePath[i] + "]<br>";
    }
    NoticeMessage += 
        "DEEPDEBUG: imageVisibility:" + imageVisibility.toString() + "<br>" +
        "DEEPDEBUG: imageX:" + imageX.toString() + "<br>" +
        "DEEPDEBUG: imageY:" + imageY.toString() + "<br>";
}

setImageURI = common_image ? 'images/' + common_image + '/' + image : country_path + default_image + image;

if (IsDeepDebug) {
    NoticeMessage += 
        "DEEPDEBUG: setImageURI:" + setImageURI + "<br>";
}

if (IsDeepDebug) NoticeMessage += "DEEPDEBUG: constSavedImage [" + constSavedImage + "]<br>";

}

if (prices_disable) attentionMessage = getSystemOption('prices_disable', currentLocale) + attentionMessage;
if (validation_disable) attentionMessage = getSystemOption('validation_disable', currentLocale) + attentionMessage;
if (isWorkWithout1C) attentionMessage = getSystemOption('isWorkWithout1C', currentLocale) + attentionMessage;
if (withoutRestriction) attentionMessage = getSystemOption('withoutRestriction', currentLocale) + attentionMessage;
if (IsDebug || IsDeepDebug) attentionMessage = getSystemOption('Debug', currentLocale) + attentionMessage;

++scriptExecCount;

NoticeMessage += (NoticeMessage ? '<br>' : '') + '* * * <br>Generated by Helpgen.py, version 2.44 beta © <br>Product Release 1.32 42179.0<br>Date: 2015-06-25 01:03'

